#!/bin/bash


# create a new folder & go into it
function f_mkd() { 
  mkdir -p "$@"
  cd "$_" || exit
}

# open pwd directory by default, or specified file, directory or application
function f_o() {
	if [ $# -eq 0 ] ; then 
    xdg-open .
	else 
    xdg-open "$@"
  fi
}

# delete the downloaded files
function f_rmdll() {
  DLL="$HOME/Downloads/*"
	DLL_DOT="$HOME/Downloads/.*"
	if [ "${#DLL[@]}" -gt 0 ] ; then 
    rm -rf ~/Downloads/*
  fi
	if [ "${#DLL_DOT[@]}" -gt 0 ] ; then 
    rm -rf ~/Downloads/.*
  fi
}

# delete all the .DS_Store in the directory
function f_rmds() {
  find ./ -type f -not -path '*Library*' -name '.DS_Store' -delete
}

# delete all trash content
function f_trash() {
	TRASH="$HOME/.Trash/*"
	TRASH_DOT="$HOME/.Trash/.*"
	if [ "${#TRASH[@]}" -gt 0 ] ; then
    rm -rf ~/.Trash/*
  fi
	if [ "${#TRASH_DOT[@]}" -gt 0 ] ; then
    rm -rf ~/.Trash/.*
  fi
}

# open Visual Studio code with given param, otherwise open the current directory
function f_code() {
	if [ $# -eq 0 ] ; then code . ;
	else code "$@" ; fi ;
}

# zip the given folder
function f_zip() {
	zip -r "$1.zip" "$1";
}

# create a new bash script
newsh() {
	FILE=/usr/local/bin/"$1"
	touch "$FILE" ; chmod a+rx "$FILE"
	echo "#!/usr/local/bin/bash" > "$FILE"
}

chsh() {
  local pwd=/Users/alexandre.delaloy/_/PERSO/cheatsheets/
  cd $pwd
  source ${pwdd}woo.sh
  cd -
}

function f_snc() {
  mv ~/Downloads/kubeconfig-$1.yaml ~/.kube/
  export KUBECONFIG=~/.kube/kubeconfig-$1.yaml
}


function docker_purge() {
  clear
  echo -e "\e[33m[#] ANNIHILATION IN 3 [#]\e[0m"
  sleep 1; clear
  echo -e "\e[33m[#] ANNIHILATION IN 2 [#]\e[0m"
  sleep 1; clear
  echo -e "\e[31m[#] ANNIHILATION IN 1 [#]\e[0m"
  sleep 1; clear
  echo -e "\e[1;33;41m[!] I G N I T I O N [!]\e[0m"
  sleep 1; clear
  echo -e "\e[34m[1] STOPING CONTAINERS [1]\e[0m"
  docker stop $(docker ps -a -q)
  sleep 1; clear
  echo -e "\e[34m[2] REMOVING CONTAINERS [2]\e[0m"
  docker rm $(docker ps -a -q)
  sleep 1; clear
  echo -e "\e[34m[3] REMOVING IMAGES [3]\e[0m"
  docker rmi $(docker images -q)
  sleep 1; clear
  echo -e "\e[34m[4] REMOVING VOLUMES [4]\e[0m"
  docker system prune --all --volumes --force
  sleep 1; clear
  echo -e "\e[32m[5] SHOW OUTPUT [5]\e[0m"
  docker ps -a ; docker images
  sleep 1; clear
  echo -e "\e[1;33;42m[<] ANNIHILATION DONE [>]\e[0m"
}