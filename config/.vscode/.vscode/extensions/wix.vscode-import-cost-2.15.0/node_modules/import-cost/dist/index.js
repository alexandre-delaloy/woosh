"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.importCost = importCost;
Object.defineProperty(exports, "cleanup", {
  enumerable: true,
  get: function get() {
    return _packageInfo.cleanup;
  }
});
Object.defineProperty(exports, "TYPESCRIPT", {
  enumerable: true,
  get: function get() {
    return _parser.TYPESCRIPT;
  }
});
Object.defineProperty(exports, "JAVASCRIPT", {
  enumerable: true,
  get: function get() {
    return _parser.JAVASCRIPT;
  }
});
Object.defineProperty(exports, "VUE", {
  enumerable: true,
  get: function get() {
    return _parser.VUE;
  }
});
Object.defineProperty(exports, "SVELTE", {
  enumerable: true,
  get: function get() {
    return _parser.SVELTE;
  }
});

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _packageInfo = require("./packageInfo");

var _parser = require("./parser");

var _events = require("events");

function importCost(fileName, text, language) {
  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
    maxCallTime: Infinity,
    concurrent: true
  };
  var emitter = new _events.EventEmitter();
  setTimeout( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var imports, promises, packages;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            imports = (0, _parser.getPackages)(fileName, text, language).filter(function (packageInfo) {
              return !packageInfo.name.startsWith('.');
            });
            emitter.emit('start', imports);
            promises = imports.map(function (packageInfo) {
              return (0, _packageInfo.getSize)(packageInfo, config);
            }).map(function (promise) {
              return promise.then(function (packageInfo) {
                emitter.emit('calculated', packageInfo);
                return packageInfo;
              });
            });
            _context.next = 6;
            return Promise.all(promises);

          case 6:
            packages = _context.sent.filter(function (x) {
              return x;
            });
            emitter.emit('done', packages);
            _context.next = 13;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](0);
            emitter.emit('error', _context.t0);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 10]]);
  })), 0);
  return emitter;
}