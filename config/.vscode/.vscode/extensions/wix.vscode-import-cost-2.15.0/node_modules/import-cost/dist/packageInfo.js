"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSize = getSize;
exports.clearSizeCache = clearSizeCache;
exports.cleanup = cleanup;
exports.cacheFileName = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _workerFarm = _interopRequireDefault(require("worker-farm"));

var _pkgDir = _interopRequireDefault(require("pkg-dir"));

var _debouncePromise = require("./debouncePromise");

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var MAX_WORKER_RETRIES = 3;
var MAX_CONCURRENT_WORKERS = require('os').cpus().length - 1;
var debug = process.env.NODE_ENV === 'test';
var workers = null;

function initWorkers(config) {
  workers = (0, _workerFarm["default"])({
    maxConcurrentWorkers: debug ? 1 : MAX_CONCURRENT_WORKERS,
    maxRetries: MAX_WORKER_RETRIES,
    maxCallTime: config.maxCallTime || Infinity
  }, require.resolve('./webpack'), ['calcSize']);
}

var extensionVersion = (0, _utils.parseJson)(_pkgDir["default"].sync(__dirname)).version;
var sizeCache = {};
var versionsCache = {};
var failedSize = {
  size: 0,
  gzip: 0
};

var cacheFileName = _path["default"].join(__dirname, "ic-cache-".concat(extensionVersion));

exports.cacheFileName = cacheFileName;

function getSize(_x, _x2) {
  return _getSize.apply(this, arguments);
}

function _getSize() {
  _getSize = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(pkg, config) {
    var key;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            readSizeCache();
            _context.prev = 1;
            versionsCache[pkg.string] = versionsCache[pkg.string] || (0, _utils.getPackageVersion)(pkg);
            _context.next = 8;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context["catch"](1);
            return _context.abrupt("return", _objectSpread(_objectSpread({}, pkg), failedSize));

          case 8:
            key = "".concat(pkg.string, "#").concat(versionsCache[pkg.string]);

            if (!(sizeCache[key] === undefined || sizeCache[key] instanceof Promise)) {
              _context.next = 27;
              break;
            }

            _context.prev = 10;
            sizeCache[key] = sizeCache[key] || calcPackageSize(pkg, config);
            _context.next = 14;
            return sizeCache[key];

          case 14:
            sizeCache[key] = _context.sent;
            saveSizeCache();
            _context.next = 27;
            break;

          case 18:
            _context.prev = 18;
            _context.t1 = _context["catch"](10);

            if (!(_context.t1 === _debouncePromise.DebounceError)) {
              _context.next = 25;
              break;
            }

            delete sizeCache[key];
            throw _context.t1;

          case 25:
            sizeCache[key] = failedSize;
            return _context.abrupt("return", _objectSpread(_objectSpread(_objectSpread({}, pkg), sizeCache[key]), {}, {
              error: _context.t1
            }));

          case 27:
            return _context.abrupt("return", _objectSpread(_objectSpread({}, pkg), sizeCache[key]));

          case 28:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 5], [10, 18]]);
  }));
  return _getSize.apply(this, arguments);
}

function calcPackageSize(packageInfo, config) {
  if (!workers) {
    initWorkers(config);
  }

  return (0, _debouncePromise.debouncePromise)("".concat(packageInfo.fileName, "#").concat(packageInfo.line), function (resolve, reject) {
    var calcSize = config.concurrent ? workers.calcSize : require('./webpack').calcSize;
    calcSize(packageInfo, function (err, result) {
      return err ? reject(err) : resolve(result);
    });
  });
}

function clearSizeCache() {
  sizeCache = {};

  if (_fs["default"].existsSync(cacheFileName)) {
    _fs["default"].unlinkSync(cacheFileName);
  }
}

function readSizeCache() {
  try {
    if (Object.keys(sizeCache).length === 0 && _fs["default"].existsSync(cacheFileName)) {
      sizeCache = JSON.parse(_fs["default"].readFileSync(cacheFileName, 'utf-8'));
    }
  } catch (e) {// silent error
  }
}

function saveSizeCache() {
  try {
    var keys = Object.keys(sizeCache).filter(function (key) {
      var size = sizeCache[key] && sizeCache[key].size;
      return typeof size === 'number' && size > 0;
    });
    var cache = keys.reduce(function (obj, key) {
      return _objectSpread(_objectSpread({}, obj), {}, (0, _defineProperty2["default"])({}, key, sizeCache[key]));
    }, {});

    if (Object.keys(cache).length > 0) {
      _fs["default"].writeFileSync(cacheFileName, JSON.stringify(cache, null, 2), 'utf-8');
    }
  } catch (e) {// silent error
  }
}

function cleanup() {
  if (workers) {
    _workerFarm["default"].end(workers);

    workers = null;
  }
}