"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _utils = require("./utils");

var _chai = require("chai");

var _path = _interopRequireDefault(require("path"));

var _proxyquire = _interopRequireDefault(require("proxyquire"));

describe('utils', function () {
  describe('getPackageDirectory', function () {
    it('should handle simple directory structure', function () {
      var pkg = {
        fileName: _path["default"].resolve('test', 'fixtures', 'import.js'),
        name: 'chai'
      };
      (0, _chai.expect)((0, _utils.getPackageDirectory)(pkg)).to.eql(_path["default"].resolve('test', 'fixtures', 'node_modules', 'chai'));
    });
    it('should handle a nested project structure', function () {
      var pkg = {
        fileName: _path["default"].resolve('test', 'fixtures', 'yarn-workspace', 'import-nested-project.js'),
        name: 'chai'
      };
      (0, _chai.expect)((0, _utils.getPackageDirectory)(pkg)).to.eql(_path["default"].resolve('test', 'fixtures', 'node_modules', 'chai'));
    });
    it('should handle a nested project structure, with scoped package', function () {
      var pkg = {
        fileName: _path["default"].resolve('test', 'fixtures', 'yarn-workspace', 'import-with-scope.js'),
        name: '@angular/core'
      };
      (0, _chai.expect)((0, _utils.getPackageDirectory)(pkg)).to.eql(_path["default"].resolve('test', 'fixtures', 'node_modules', '@angular', 'core'));
    });
    it('should handle a nested project structure, with scoped package and filename', function () {
      var pkg = {
        fileName: _path["default"].resolve('test', 'fixtures', 'yarn-workspace', 'import-with-scope-filename.js'),
        name: '@angular/core/index.js'
      };
      (0, _chai.expect)((0, _utils.getPackageDirectory)(pkg)).to.eql(_path["default"].resolve('test', 'fixtures', 'node_modules', '@angular', 'core'));
    });
    it('should bail out when project directory is not found', function () {
      var utils = (0, _proxyquire["default"])('./utils', {
        'pkg-dir': {
          sync: function sync() {
            return null;
          }
        }
      });
      var pkg = {
        fileName: _path["default"].resolve('test', 'fixtures', 'import.js'),
        name: 'chai'
      };
      var exception = 'Package directory not found [chai]';
      (0, _chai.expect)(function () {
        return utils.getPackageDirectory(pkg);
      }).to["throw"](exception);
    });
  });
  describe('getPackageModuleContainer', function () {
    it('should return the node_modules dir in the basic case', function () {
      var pkg = {
        fileName: _path["default"].resolve('test', 'fixtures', 'import.js'),
        name: 'chai'
      };
      (0, _chai.expect)((0, _utils.getPackageModuleContainer)(pkg)).to.eql(_path["default"].resolve('test', 'fixtures', 'node_modules'));
    });
    it('should return the node_modules dir for nested project structure', function () {
      var pkg = {
        fileName: _path["default"].resolve('test', 'fixtures', 'yarn-workspace', 'import-nested-project.js'),
        name: 'chai'
      };
      (0, _chai.expect)((0, _utils.getPackageModuleContainer)(pkg)).to.eql(_path["default"].resolve('test', 'fixtures', 'node_modules'));
    });
  });
});