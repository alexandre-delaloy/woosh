{
	"name": "gitlens",
	"displayName": "GitLens — Git supercharged",
	"description": "Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more",
	"version": "11.2.1",
	"author": {
		"name": "Eric Amodio",
		"email": "eamodio@gmail.com"
	},
	"publisher": "eamodio",
	"license": "SEE LICENSE IN LICENSE",
	"homepage": "https://gitlens.amod.io/",
	"bugs": {
		"url": "https://github.com/eamodio/vscode-gitlens/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/eamodio/vscode-gitlens.git"
	},
	"engines": {
		"vscode": "^1.52.0"
	},
	"main": "./dist/gitlens",
	"icon": "images/gitlens-icon.png",
	"preview": false,
	"badges": [
		{
			"url": "https://img.shields.io/badge/vscode--dev--community-gitlens-blue.svg?logo=slack&labelColor=555555",
			"href": "https://vscode-slack.amod.io",
			"description": "Join us in the #gitlens channel"
		}
	],
	"categories": [
		"Other"
	],
	"galleryBanner": {
		"color": "#8647ae",
		"theme": "dark"
	},
	"keywords": [
		"gitlens",
		"git",
		"blame",
		"log",
		"annotation",
		"multi-root ready"
	],
	"activationEvents": [
		"onCustomEditor:gitlens.rebase",
		"onFileSystem:gitlens",
		"onView:gitlens.views.updates",
		"onView:gitlens.views.repositories",
		"onView:gitlens.views.commits",
		"onView:gitlens.views.fileHistory",
		"onView:gitlens.views.lineHistory",
		"onView:gitlens.views.branches",
		"onView:gitlens.views.remotes",
		"onView:gitlens.views.stashes",
		"onView:gitlens.views.tags",
		"onView:gitlens.views.contributors",
		"onView:gitlens.views.searchAndCompare",
		"onCommand:gitlens.supportGitLens",
		"onCommand:gitlens.showSettingsPage",
		"onCommand:gitlens.showSettingsPage#views",
		"onCommand:gitlens.showSettingsPage#branches-view",
		"onCommand:gitlens.showSettingsPage#commits-view",
		"onCommand:gitlens.showSettingsPage#contributors-view",
		"onCommand:gitlens.showSettingsPage#file-history-view",
		"onCommand:gitlens.showSettingsPage#line-history-view",
		"onCommand:gitlens.showSettingsPage#remotes-view",
		"onCommand:gitlens.showSettingsPage#repositories-view",
		"onCommand:gitlens.showSettingsPage#search-compare-view",
		"onCommand:gitlens.showSettingsPage#stashes-view",
		"onCommand:gitlens.showSettingsPage#tags-view",
		"onCommand:gitlens.showWelcomePage",
		"onCommand:gitlens.showBranchesView",
		"onCommand:gitlens.showCommitsView",
		"onCommand:gitlens.showContributorsView",
		"onCommand:gitlens.showFileHistoryView",
		"onCommand:gitlens.showLineHistoryView",
		"onCommand:gitlens.showRemotesView",
		"onCommand:gitlens.showRepositoriesView",
		"onCommand:gitlens.showSearchAndCompareView",
		"onCommand:gitlens.showStashesView",
		"onCommand:gitlens.showTagsView",
		"onCommand:gitlens.showWelcomeView",
		"onCommand:gitlens.closeUpdatesView",
		"onCommand:gitlens.closeWelcomeView",
		"onCommand:gitlens.compareWith",
		"onCommand:gitlens.compareHeadWith",
		"onCommand:gitlens.compareWorkingWith",
		"onCommand:gitlens.diffDirectory",
		"onCommand:gitlens.diffDirectoryWithHead",
		"onCommand:gitlens.diffWithNext",
		"onCommand:gitlens.diffWithNextInDiffLeft",
		"onCommand:gitlens.diffWithNextInDiffRight",
		"onCommand:gitlens.diffWithPrevious",
		"onCommand:gitlens.diffWithPreviousInDiffLeft",
		"onCommand:gitlens.diffWithPreviousInDiffRight",
		"onCommand:gitlens.diffLineWithPrevious",
		"onCommand:gitlens.diffWithRevision",
		"onCommand:gitlens.diffWithRevisionFrom",
		"onCommand:gitlens.diffWithWorking",
		"onCommand:gitlens.diffWithWorkingInDiffLeft",
		"onCommand:gitlens.diffWithWorkingInDiffRight",
		"onCommand:gitlens.diffLineWithWorking",
		"onCommand:gitlens.disableRebaseEditor",
		"onCommand:gitlens.enableRebaseEditor",
		"onCommand:gitlens.toggleFileBlame",
		"onCommand:gitlens.toggleFileBlameInDiffLeft",
		"onCommand:gitlens.toggleFileBlameInDiffRight",
		"onCommand:gitlens.clearFileAnnotations",
		"onCommand:gitlens.computingFileAnnotations",
		"onCommand:gitlens.toggleFileHeatmap",
		"onCommand:gitlens.toggleFileHeatmapInDiffLeft",
		"onCommand:gitlens.toggleFileHeatmapInDiffRight",
		"onCommand:gitlens.toggleFileChanges",
		"onCommand:gitlens.toggleLineBlame",
		"onCommand:gitlens.toggleCodeLens",
		"onCommand:gitlens.gitCommands",
		"onCommand:gitlens.switchMode",
		"onCommand:gitlens.toggleReviewMode",
		"onCommand:gitlens.toggleZenMode",
		"onCommand:gitlens.setViewsLayout",
		"onCommand:gitlens.showCommitSearch",
		"onCommand:gitlens.revealCommitInView",
		"onCommand:gitlens.showCommitInView",
		"onCommand:gitlens.showCommitsInView",
		"onCommand:gitlens.showFileHistoryInView",
		"onCommand:gitlens.showQuickCommitDetails",
		"onCommand:gitlens.showQuickCommitFileDetails",
		"onCommand:gitlens.showQuickRevisionDetails",
		"onCommand:gitlens.showQuickRevisionDetailsInDiffLeft",
		"onCommand:gitlens.showQuickRevisionDetailsInDiffRight",
		"onCommand:gitlens.showQuickFileHistory",
		"onCommand:gitlens.quickOpenFileHistory",
		"onCommand:gitlens.showQuickBranchHistory",
		"onCommand:gitlens.showQuickRepoHistory",
		"onCommand:gitlens.showQuickRepoStatus",
		"onCommand:gitlens.showQuickStashList",
		"onCommand:gitlens.addAuthors",
		"onCommand:gitlens.connectRemoteProvider",
		"onCommand:gitlens.disconnectRemoteProvider",
		"oncommand:gitlens.copyCurrentBranch",
		"onCommand:gitlens.copyMessageToClipboard",
		"onCommand:gitlens.copyShaToClipboard",
		"onCommand:gitlens.closeUnchangedFiles",
		"onCommand:gitlens.openChangedFiles",
		"onCommand:gitlens.openBranchesOnRemote",
		"onCommand:gitlens.copyRemoteBranchesUrl",
		"onCommand:gitlens.openBranchOnRemote",
		"onCommand:gitlens.copyRemoteBranchUrl",
		"onCommand:gitlens.openCommitOnRemote",
		"onCommand:gitlens.copyRemoteCommitUrl",
		"onCommand:gitlens.openComparisonOnRemote",
		"onCommand:gitlens.copyRemoteComparisonUrl",
		"onCommand:gitlens.openFileFromRemote",
		"onCommand:gitlens.openFileOnRemote",
		"onCommand:gitlens.copyRemoteFileUrlToClipboard",
		"onCommand:gitlens.openFileOnRemoteFrom",
		"onCommand:gitlens.copyRemoteFileUrlFrom",
		"onCommand:gitlens.openFileRevision",
		"onCommand:gitlens.openFileRevisionFrom",
		"onCommand:gitlens.openPullRequestOnRemote",
		"onCommand:gitlens.copyRemotePullRequestUrl",
		"onCommand:gitlens.openAssociatedPullRequestOnRemote",
		"onCommand:gitlens.openRepoOnRemote",
		"onCommand:gitlens.copyRemoteRepositoryUrl",
		"onCommand:gitlens.openRevisionFile",
		"onCommand:gitlens.openRevisionFileInDiffLeft",
		"onCommand:gitlens.openRevisionFileInDiffRight",
		"onCommand:gitlens.openWorkingFile",
		"onCommand:gitlens.openWorkingFileInDiffLeft",
		"onCommand:gitlens.openWorkingFileInDiffRight",
		"onCommand:gitlens.stashApply",
		"onCommand:gitlens.stashSave",
		"onCommand:gitlens.stashSaveFiles",
		"onCommand:gitlens.externalDiff",
		"onCommand:gitlens.externalDiffAll",
		"onCommand:gitlens.resetSuppressedWarnings",
		"onCommand:gitlens.inviteToLiveShare",
		"onCommand:gitlens.browseRepoAtRevision",
		"onCommand:gitlens.browseRepoAtRevisionInNewWindow",
		"onCommand:gitlens.browseRepoBeforeRevision",
		"onCommand:gitlens.browseRepoBeforeRevisionInNewWindow",
		"onCommand:gitlens.fetchRepositories",
		"onCommand:gitlens.pullRepositories",
		"onCommand:gitlens.pushRepositories",
		"onStartupFinished"
	],
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "GitLens — Use 'GitLens: Open Settings' for a richer, interactive experience",
			"properties": {
				"gitlens.autolinks": {
					"type": [
						"array",
						"null"
					],
					"default": null,
					"items": {
						"type": "object",
						"required": [
							"prefix",
							"url"
						],
						"properties": {
							"prefix": {
								"type": "string",
								"description": "Specifies the short prefix to use to generate autolinks for the external resource"
							},
							"title": {
								"type": [
									"string",
									"null"
								],
								"default": null,
								"description": "Specifies an optional title for the generated autolink. Use `<num>` as the variable for the reference number"
							},
							"url": {
								"type": "string",
								"description": "Specifies the url of the external resource you want to link to. Use `<num>` as the variable for the reference number"
							},
							"alphanumeric": {
								"type": "boolean",
								"description": "Specifies whether alphanumeric characters should be allowed in `<num>`",
								"default": false
							},
							"ignoreCase": {
								"type": "boolean",
								"description": "Specifies whether case should be ignored when matching the prefix",
								"default": false
							}
						},
						"additionalProperties": false
					},
					"uniqueItems": true,
					"markdownDescription": "Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number",
					"scope": "window"
				},
				"gitlens.blame.avatars": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show avatar images in the gutter blame annotations",
					"scope": "window"
				},
				"gitlens.blame.compact": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to compact (deduplicate) matching adjacent gutter blame annotations",
					"scope": "window"
				},
				"gitlens.blame.dateFormat": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) in gutter blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
					"scope": "window"
				},
				"gitlens.blame.format": {
					"type": "string",
					"default": "${message|50?} ${agoOrDate|14-}",
					"markdownDescription": "Specifies the format of the gutter blame annotations. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.blame.dateFormat#` setting",
					"scope": "window"
				},
				"gitlens.blame.heatmap.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide a heatmap indicator in the gutter blame annotations",
					"scope": "window"
				},
				"gitlens.blame.heatmap.location": {
					"type": "string",
					"default": "right",
					"enum": [
						"left",
						"right"
					],
					"enumDescriptions": [
						"Adds a heatmap indicator on the left edge of the gutter blame annotations",
						"Adds a heatmap indicator on the right edge of the gutter blame annotations"
					],
					"markdownDescription": "Specifies where the heatmap indicators will be shown in the gutter blame annotations",
					"scope": "window"
				},
				"gitlens.blame.highlight.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to highlight lines associated with the current line",
					"scope": "window"
				},
				"gitlens.blame.highlight.locations": {
					"type": "array",
					"default": [
						"gutter",
						"line",
						"overview"
					],
					"items": {
						"type": "string",
						"enum": [
							"gutter",
							"line",
							"overview"
						],
						"enumDescriptions": [
							"Adds a gutter indicator",
							"Adds a full-line highlight background color",
							"Adds a decoration to the overview ruler (scroll bar)"
						]
					},
					"minItems": 1,
					"maxItems": 3,
					"uniqueItems": true,
					"markdownDescription": "Specifies where the associated line highlights will be shown",
					"scope": "window"
				},
				"gitlens.blame.ignoreWhitespace": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Specifies whether to ignore whitespace when comparing revisions during blame operations",
					"scope": "resource"
				},
				"gitlens.blame.separateLines": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether gutter blame annotations will be separated by a small gap",
					"scope": "window"
				},
				"gitlens.blame.toggleMode": {
					"type": "string",
					"default": "file",
					"enum": [
						"file",
						"window"
					],
					"enumDescriptions": [
						"Toggles each file individually",
						"Toggles the window, i.e. all files at once"
					],
					"markdownDescription": "Specifies how the gutter blame annotations will be toggled",
					"scope": "window"
				},
				"gitlens.changes.locations": {
					"type": "array",
					"default": [
						"gutter",
						"overview"
					],
					"items": {
						"type": "string",
						"enum": [
							"gutter",
							"overview"
						],
						"enumDescriptions": [
							"Adds a gutter indicator",
							"Adds a decoration to the overview ruler (scroll bar)"
						]
					},
					"minItems": 1,
					"maxItems": 2,
					"uniqueItems": true,
					"markdownDescription": "Specifies where the indicators of the gutter changes annotations will be shown",
					"scope": "window"
				},
				"gitlens.changes.toggleMode": {
					"type": "string",
					"default": "file",
					"enum": [
						"file",
						"window"
					],
					"enumDescriptions": [
						"Toggles each file individually",
						"Toggles the window, i.e. all files at once"
					],
					"markdownDescription": "Specifies how the gutter changes annotations will be toggled",
					"scope": "window"
				},
				"gitlens.codeLens.authors.command": {
					"anyOf": [
						{
							"enum": [
								false
							]
						},
						{
							"type": "string",
							"enum": [
								"gitlens.toggleFileBlame",
								"gitlens.diffWithPrevious",
								"gitlens.revealCommitInView",
								"gitlens.showCommitsInView",
								"gitlens.showQuickCommitDetails",
								"gitlens.showQuickCommitFileDetails",
								"gitlens.showQuickFileHistory",
								"gitlens.showQuickRepoHistory"
							],
							"enumDescriptions": [
								"Toggles file blame annotations",
								"Compares the current committed file with the previous commit",
								"Reveals the commit in the Side Bar",
								"Searches for commits within the range",
								"Shows a commit details quick pick",
								"Shows a commit file details quick pick",
								"Shows a file history quick pick",
								"Shows a branch history quick pick"
							]
						}
					],
					"default": "gitlens.toggleFileBlame",
					"markdownDescription": "Specifies the command to be executed when an _authors_ code lens is clicked",
					"scope": "window"
				},
				"gitlens.codeLens.authors.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide an _authors_ code lens, showing number of authors of the file or code block and the most prominent author (if there is more than one)",
					"scope": "window"
				},
				"gitlens.codeLens.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide any Git code lens, by default. Use the `Toggle Git Code Lens` command (`gitlens.toggleCodeLens`) to toggle the Git code lens on and off for the current window",
					"scope": "window"
				},
				"gitlens.codeLens.includeSingleLineSymbols": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Specifies whether to provide any Git code lens on symbols that span only a single line",
					"scope": "window"
				},
				"gitlens.codeLens.recentChange.command": {
					"anyOf": [
						{
							"enum": [
								false
							]
						},
						{
							"type": "string",
							"enum": [
								"gitlens.toggleFileBlame",
								"gitlens.diffWithPrevious",
								"gitlens.revealCommitInView",
								"gitlens.showCommitsInView",
								"gitlens.showQuickCommitDetails",
								"gitlens.showQuickCommitFileDetails",
								"gitlens.showQuickFileHistory",
								"gitlens.showQuickRepoHistory"
							],
							"enumDescriptions": [
								"Toggles file blame annotations",
								"Compares the current committed file with the previous commit",
								"Reveals the commit in the Side Bar",
								"Searches for the commit",
								"Shows a commit details quick pick",
								"Shows a commit file details quick pick",
								"Shows a file history quick pick",
								"Shows a branch history quick pick"
							]
						}
					],
					"default": "gitlens.showQuickCommitFileDetails",
					"markdownDescription": "Specifies the command to be executed when a _recent change_ code lens is clicked",
					"scope": "window"
				},
				"gitlens.codeLens.recentChange.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide a _recent change_ code lens, showing the author and date of the most recent commit for the file or code block",
					"scope": "window"
				},
				"gitlens.codeLens.scopes": {
					"type": "array",
					"default": [
						"document",
						"containers"
					],
					"items": {
						"type": "string",
						"enum": [
							"document",
							"containers",
							"blocks"
						],
						"enumDescriptions": [
							"Adds code lens at the top of the document",
							"Adds code lens at the start of container-like symbols (modules, classes, interfaces, etc)",
							"Adds code lens at the start of block-like symbols (functions, methods, etc) lines"
						]
					},
					"minItems": 0,
					"maxItems": 3,
					"uniqueItems": true,
					"markdownDescription": "Specifies where Git code lens will be shown in the document",
					"scope": "language-overridable"
				},
				"gitlens.codeLens.scopesByLanguage": {
					"deprecationMessage": "Deprecated. Use per-language `gitlens.codeLens.scopes` and `gitlens.codeLens.symbolScopes` settings instead",
					"markdownDeprecationMessage": "Deprecated. Use the per-language `#gitlens.codeLens.scopes#` and `#gitlens.codeLens.symbolScopes#` settings instead"
				},
				"gitlens.codeLens.symbolScopes": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"uniqueItems": true,
					"markdownDescription": "Specifies a set of document symbols where Git code lens will or will not be shown in the document. Prefix with `!` to avoid providing a Git code lens for the symbol. Must be a member of `SymbolKind`",
					"scope": "language-overridable"
				},
				"gitlens.currentLine.dateFormat": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
					"scope": "window"
				},
				"gitlens.currentLine.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window",
					"scope": "window"
				},
				"gitlens.currentLine.format": {
					"type": "string",
					"default": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",
					"markdownDescription": "Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.currentLine.dateFormat#` setting",
					"scope": "window"
				},
				"gitlens.currentLine.pullRequests.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the current line blame annotation. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.currentLine.scrollable": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport. **NOTE**: Setting this to `false` will inhibit the hovers from showing over the annotation; Set `#gitlens.hovers.currentLine.over#` to `line` to enable the hovers to show anywhere over the line.",
					"scope": "window"
				},
				"gitlens.debug": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Specifies debug mode",
					"scope": "window"
				},
				"gitlens.defaultDateFormat": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"markdownDescription": "Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
					"scope": "window"
				},
				"gitlens.defaultDateShortFormat": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"markdownDescription": "Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
					"scope": "window"
				},
				"gitlens.defaultDateSource": {
					"type": "string",
					"default": "authored",
					"enum": [
						"authored",
						"committed"
					],
					"enumDescriptions": [
						"Uses the date when the changes were authored (i.e. originally written)",
						"Uses the date when the changes were committed"
					],
					"markdownDescription": "Specifies whether commit dates should use the authored or committed date",
					"scope": "window"
				},
				"gitlens.defaultDateStyle": {
					"type": "string",
					"default": "relative",
					"enum": [
						"relative",
						"absolute"
					],
					"enumDescriptions": [
						"e.g. 1 day ago",
						"e.g. July 25th, 2018 7:18pm"
					],
					"markdownDescription": "Specifies how dates will be displayed by default",
					"scope": "window"
				},
				"gitlens.defaultGravatarsStyle": {
					"type": "string",
					"default": "robohash",
					"enum": [
						"identicon",
						"mp",
						"monsterid",
						"retro",
						"robohash",
						"wavatar"
					],
					"enumDescriptions": [
						"A geometric pattern",
						"A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)",
						"A monster with different colors, faces, etc",
						"8-bit arcade-style pixelated faces",
						"A robot with different colors, faces, etc",
						"A face with differing features and backgrounds"
					],
					"markdownDescription": "Specifies the style of the gravatar default (fallback) images",
					"scope": "window"
				},
				"gitlens.defaultTimeFormat": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"markdownDescription": "Specifies how times will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
					"scope": "window"
				},
				"gitlens.fileAnnotations.command": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"enum": [
						null,
						"blame",
						"heatmap",
						"changes"
					],
					"enumDescriptions": [
						"Shows a menu to choose which file annotations to toggle",
						"Toggles gutter blame annotations",
						"Toggles gutter heatmap annotations",
						"Toggles gutter changes annotations"
					],
					"markdownDescription": "Specifies whether the file annotations button in the editor title shows a menu or immediately toggles the specified file annotations",
					"scope": "window"
				},
				"gitlens.gitCommands.closeOnFocusOut": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to dismiss the _Git Command Palette_ when focus is lost (if not, press `ESC` to dismiss)",
					"scope": "window"
				},
				"gitlens.gitCommands.search.matchAll": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Specifies whether to match all or any commit message search patterns",
					"scope": "window"
				},
				"gitlens.gitCommands.search.matchCase": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Specifies whether to match commit search patterns with or without regard to casing",
					"scope": "window"
				},
				"gitlens.gitCommands.search.matchRegex": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to match commit search patterns using regular expressions",
					"scope": "window"
				},
				"gitlens.gitCommands.search.showResultsInView": {
					"deprecationMessage": "Deprecated. This setting has been renamed to gitlens.gitCommands.search.showResultsInSideBar",
					"markdownDeprecationMessage": "Deprecated. This setting has been renamed to `#gitlens.gitCommands.search.showResultsInSideBar#`"
				},
				"gitlens.gitCommands.search.showResultsInSideBar": {
					"type": [
						"boolean",
						"null"
					],
					"default": null,
					"markdownDescription": "Specifies whether to show the commit search results directly in the quick pick menu, in the Side Bar, or will be based on the context",
					"scope": "window"
				},
				"gitlens.gitCommands.skipConfirmations": {
					"type": "array",
					"default": [
						"fetch:command",
						"stash-push:command",
						"switch:command"
					],
					"items": {
						"type": "string",
						"enum": [
							"branch-create:command",
							"branch-create:menu",
							"co-authors:command",
							"co-authors:menu",
							"fetch:command",
							"fetch:menu",
							"pull:command",
							"pull:menu",
							"push:command",
							"push:menu",
							"stash-apply:command",
							"stash-apply:menu",
							"stash-pop:command",
							"stash-pop:menu",
							"stash-push:command",
							"stash-push:menu",
							"switch:command",
							"switch:menu",
							"tag-create:command",
							"tag-create:menu"
						],
						"enumDescriptions": [
							"Skips branch create confirmations when run from a command, e.g. a view action",
							"Skips branch create confirmations when run from the Git Command Palette",
							"Skips co-author confirmations when run from a command, e.g. a view action",
							"Skips co-author confirmations when run from the Git Command Palette",
							"Skips fetch confirmations when run from a command, e.g. a view action",
							"Skips fetch confirmations when run from the Git Command Palette",
							"Skips pull confirmations when run from a command, e.g. a view action",
							"Skips pull confirmations when run from the Git Command Palette",
							"Skips push confirmations when run from a command, e.g. a view action",
							"Skips push confirmations when run from the Git Command Palette",
							"Skips stash apply confirmations when run from a command, e.g. a view action",
							"Skips stash apply confirmations when run from the Git Command Palette",
							"Skips stash pop confirmations when run from a command, e.g. a view action",
							"Skips stash pop confirmations when run from the Git Command Palette",
							"Skips stash push confirmations when run from a command, e.g. a view action",
							"Skips stash push confirmations when run from the Git Command Palette",
							"Skips switch confirmations when run from a command, e.g. a view action",
							"Skips switch confirmations when run from the Git Command Palette",
							"Skips tag create confirmations when run from a command, e.g. a view action",
							"Skips tag create confirmations when run from the Git Command Palette"
						]
					},
					"minItems": 0,
					"maxItems": 14,
					"uniqueItems": true,
					"markdownDescription": "Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`",
					"scope": "window"
				},
				"gitlens.gitCommands.sortBy": {
					"type": "string",
					"default": "usage",
					"enum": [
						"name",
						"usage"
					],
					"enumDescriptions": [
						"Sorts commands by name",
						"Sorts commands by last used date"
					],
					"markdownDescription": "Specifies how Git commands are sorted in the _Git Command Palette_",
					"scope": "window"
				},
				"gitlens.heatmap.ageThreshold": {
					"type": "number",
					"default": 90,
					"markdownDescription": "Specifies the age of the most recent change (in days) after which the gutter heatmap annotations will be cold rather than hot (i.e. will use `#gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor#`)",
					"scope": "window"
				},
				"gitlens.heatmap.coldColor": {
					"type": "string",
					"default": "#0a60f6",
					"markdownDescription": "Specifies the base color of the gutter heatmap annotations when the most recent change is older (cold) than the `#gitlens.heatmap.ageThreshold#` value",
					"scope": "window"
				},
				"gitlens.heatmap.hotColor": {
					"type": "string",
					"default": "#f66a0a",
					"markdownDescription": "Specifies the base color of the gutter heatmap annotations when the most recent change is newer (hot) than the `#gitlens.heatmap.ageThreshold#` value",
					"scope": "window"
				},
				"gitlens.heatmap.locations": {
					"type": "array",
					"default": [
						"gutter",
						"overview"
					],
					"items": {
						"type": "string",
						"enum": [
							"gutter",
							"overview"
						],
						"enumDescriptions": [
							"Adds a gutter indicator",
							"Adds a decoration to the overview ruler (scroll bar)"
						]
					},
					"minItems": 1,
					"maxItems": 2,
					"uniqueItems": true,
					"markdownDescription": "Specifies where the indicators of the gutter heatmap annotations will be shown",
					"scope": "window"
				},
				"gitlens.heatmap.toggleMode": {
					"type": "string",
					"default": "file",
					"enum": [
						"file",
						"window"
					],
					"enumDescriptions": [
						"Toggles each file individually",
						"Toggles the window, i.e. all files at once"
					],
					"markdownDescription": "Specifies how the gutter heatmap annotations will be toggled",
					"scope": "window"
				},
				"gitlens.hovers.annotations.changes": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations",
					"scope": "window"
				},
				"gitlens.hovers.annotations.details": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations",
					"scope": "window"
				},
				"gitlens.hovers.annotations.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide any hovers when showing blame annotations",
					"scope": "window"
				},
				"gitlens.hovers.annotations.over": {
					"type": "string",
					"default": "line",
					"enum": [
						"annotation",
						"line"
					],
					"enumDescriptions": [
						"Only shown when hovering over the line annotation",
						"Shown when hovering anywhere over the line"
					],
					"markdownDescription": "Specifies when to trigger hovers when showing blame annotations",
					"scope": "window"
				},
				"gitlens.hovers.avatars": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show avatar images in hovers",
					"scope": "window"
				},
				"gitlens.hovers.avatarSize": {
					"type": "number",
					"default": 32,
					"markdownDescription": "Specifies the size of the avatar images in hovers",
					"scope": "window"
				},
				"gitlens.hovers.changesDiff": {
					"type": "string",
					"default": "line",
					"enum": [
						"line",
						"hunk"
					],
					"enumDescriptions": [
						"Shows only the changes to the line",
						"Shows the set of related changes"
					],
					"markdownDescription": "Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover",
					"scope": "window"
				},
				"gitlens.hovers.currentLine.changes": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide a _changes (diff)_ hover for the current line",
					"scope": "window"
				},
				"gitlens.hovers.currentLine.details": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide a _commit details_ hover for the current line",
					"scope": "window"
				},
				"gitlens.hovers.currentLine.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide any hovers for the current line",
					"scope": "window"
				},
				"gitlens.hovers.currentLine.over": {
					"type": "string",
					"default": "annotation",
					"enum": [
						"annotation",
						"line"
					],
					"enumDescriptions": [
						"Only shown when hovering over the line annotation",
						"Shown when hovering anywhere over the line"
					],
					"markdownDescription": "Specifies when to trigger hovers for the current line",
					"scope": "window"
				},
				"gitlens.hovers.detailsMarkdownFormat": {
					"type": "string",
					"default": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}\n\n${commands}",
					"markdownDescription": "Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
					"scope": "window"
				},
				"gitlens.hovers.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide any hovers",
					"scope": "window"
				},
				"gitlens.hovers.autolinks.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to automatically link external resources in commit messages",
					"scope": "window"
				},
				"gitlens.hovers.autolinks.enhanced": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.hovers.pullRequests.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the hovers. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.insiders": {
					"deprecationMessage": "Deprecated. Use the Insiders edition of GitLens instead",
					"markdownDeprecationMessage": "Deprecated. Use the [Insiders edition](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens-insiders) of GitLens instead"
				},
				"gitlens.integrations.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to enable rich integrations with any supported remote services",
					"scope": "window"
				},
				"gitlens.keymap": {
					"type": "string",
					"default": "chorded",
					"enum": [
						"alternate",
						"chorded",
						"none"
					],
					"enumDescriptions": [
						"Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)",
						"Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)",
						"No shortcut keys will be added"
					],
					"markdownDescription": "Specifies the keymap to use for GitLens shortcut keys",
					"scope": "window"
				},
				"gitlens.liveshare.allowGuestAccess": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share",
					"scope": "window"
				},
				"gitlens.menus": {
					"anyOf": [
						{
							"enum": [
								false
							]
						},
						{
							"type": "object",
							"properties": {
								"editor": {
									"anyOf": [
										{
											"enum": [
												false
											]
										},
										{
											"type": "object",
											"properties": {
												"blame": {
													"type": "boolean"
												},
												"clipboard": {
													"type": "boolean"
												},
												"compare": {
													"type": "boolean"
												},
												"history": {
													"type": "boolean"
												},
												"remote": {
													"type": "boolean"
												}
											}
										}
									]
								},
								"editorGroup": {
									"anyOf": [
										{
											"enum": [
												false
											]
										},
										{
											"type": "object",
											"properties": {
												"blame": {
													"type": "boolean"
												},
												"compare": {
													"type": "boolean"
												}
											}
										}
									]
								},
								"editorTab": {
									"anyOf": [
										{
											"enum": [
												false
											]
										},
										{
											"type": "object",
											"properties": {
												"clipboard": {
													"type": "boolean"
												},
												"compare": {
													"type": "boolean"
												},
												"history": {
													"type": "boolean"
												},
												"remote": {
													"type": "boolean"
												}
											}
										}
									]
								},
								"explorer": {
									"anyOf": [
										{
											"enum": [
												false
											]
										},
										{
											"type": "object",
											"properties": {
												"clipboard": {
													"type": "boolean"
												},
												"compare": {
													"type": "boolean"
												},
												"history": {
													"type": "boolean"
												},
												"remote": {
													"type": "boolean"
												}
											}
										}
									]
								},
								"scm": {
									"anyOf": [
										{
											"enum": [
												false
											]
										},
										{
											"type": "object",
											"properties": {
												"authors": {
													"type": "boolean"
												}
											}
										}
									]
								},
								"scmGroupInline": {
									"anyOf": [
										{
											"enum": [
												false
											]
										},
										{
											"type": "object",
											"properties": {
												"stash": {
													"type": "boolean"
												}
											}
										}
									]
								},
								"scmGroup": {
									"anyOf": [
										{
											"enum": [
												false
											]
										},
										{
											"type": "object",
											"properties": {
												"compare": {
													"type": "boolean"
												},
												"openClose": {
													"type": "boolean"
												},
												"stash": {
													"type": "boolean"
												}
											}
										}
									]
								},
								"scmItem": {
									"anyOf": [
										{
											"enum": [
												false
											]
										},
										{
											"type": "object",
											"properties": {
												"clipboard": {
													"type": "boolean"
												},
												"compare": {
													"type": "boolean"
												},
												"history": {
													"type": "boolean"
												},
												"remote": {
													"type": "boolean"
												},
												"stash": {
													"type": "boolean"
												}
											}
										}
									]
								}
							},
							"additionalProperties": false
						}
					],
					"default": {
						"editor": {
							"blame": false,
							"clipboard": true,
							"compare": true,
							"history": false,
							"remote": false
						},
						"editorGroup": {
							"blame": true,
							"compare": true
						},
						"editorTab": {
							"clipboard": true,
							"compare": true,
							"history": true,
							"remote": true
						},
						"explorer": {
							"clipboard": true,
							"compare": true,
							"history": true,
							"remote": true
						},
						"scm": {
							"authors": true
						},
						"scmGroupInline": {
							"stash": true
						},
						"scmGroup": {
							"compare": true,
							"openClose": true,
							"stash": true
						},
						"scmItem": {
							"clipboard": true,
							"compare": true,
							"history": true,
							"remote": false,
							"stash": true
						}
					},
					"markdownDescription": "Specifies which commands will be added to which menus",
					"scope": "window"
				},
				"gitlens.mode.active": {
					"type": "string",
					"markdownDescription": "Specifies the active GitLens mode, if any",
					"scope": "window"
				},
				"gitlens.mode.statusBar.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide the active GitLens mode in the status bar",
					"scope": "window"
				},
				"gitlens.mode.statusBar.alignment": {
					"type": "string",
					"default": "right",
					"enum": [
						"left",
						"right"
					],
					"enumDescriptions": [
						"Aligns to the left",
						"Aligns to the right"
					],
					"markdownDescription": "Specifies the active GitLens mode alignment in the status bar",
					"scope": "window"
				},
				"gitlens.modes": {
					"type": "object",
					"properties": {
						"zen": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string",
									"description": "Specifies the friendly name of this user-defined mode"
								},
								"statusBarItemName": {
									"type": "string",
									"description": "Specifies the name shown in the status bar when this user-defined mode is active"
								},
								"description": {
									"type": "string",
									"description": "Specifies the description of this user-defined mode"
								},
								"codeLens": {
									"type": "boolean",
									"description": "Specifies whether to show any Git code lens when this user-defined mode is active"
								},
								"currentLine": {
									"type": "boolean",
									"description": "Specifies whether to show a blame annotation for the current line when this user-defined mode is active"
								},
								"hovers": {
									"type": "boolean",
									"description": "Specifies whether to show any hovers when this user-defined mode is active"
								},
								"statusBar": {
									"type": "boolean",
									"description": "Specifies whether to show blame information in the status bar when this user-defined mode is active"
								}
							}
						},
						"review": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string",
									"description": "Specifies the friendly name of this user-defined mode"
								},
								"statusBarItemName": {
									"type": "string",
									"description": "Specifies the name shown in the status bar when this user-defined mode is active"
								},
								"description": {
									"type": "string",
									"description": "Specifies the description of this user-defined mode"
								},
								"codeLens": {
									"type": "boolean",
									"description": "Specifies whether to show any Git code lens when this user-defined mode is active"
								},
								"currentLine": {
									"type": "boolean",
									"description": "Specifies whether to show a blame annotation for the current line when this user-defined mode is active"
								},
								"hovers": {
									"type": "boolean",
									"description": "Specifies whether to show any hovers when this user-defined mode is active"
								},
								"statusBar": {
									"type": "boolean",
									"description": "Specifies whether to show blame information in the status bar when this user-defined mode is active"
								}
							}
						}
					},
					"additionalProperties": {
						"type": "object",
						"required": [
							"name"
						],
						"properties": {
							"name": {
								"type": "string",
								"description": "Specifies the friendly name of this user-defined mode"
							},
							"statusBarItemName": {
								"type": "string",
								"description": "Specifies the name shown in the status bar when this user-defined mode is active"
							},
							"description": {
								"type": "string",
								"description": "Specifies the description of this user-defined mode"
							},
							"annotations": {
								"type": "string",
								"enum": [
									"blame",
									"changes",
									"heatmap"
								],
								"enumDescriptions": [
									"Shows the gutter blame annotations",
									"Shows the gutter changes annotations",
									"Shows the gutter heatmap annotations"
								],
								"description": "Specifies which (if any) file annotations will be shown when this user-defined mode is active"
							},
							"codeLens": {
								"type": "boolean",
								"description": "Specifies whether to show any Git code lens when this user-defined mode is active"
							},
							"currentLine": {
								"type": "boolean",
								"description": "Specifies whether to show a blame annotation for the current line when this user-defined mode is active"
							},
							"hovers": {
								"type": "boolean",
								"description": "Specifies whether to show any hovers when this user-defined mode is active"
							},
							"statusBar": {
								"type": "boolean",
								"description": "Specifies whether to show blame information in the status bar when this user-defined mode is active"
							}
						}
					},
					"default": {
						"zen": {
							"name": "Zen",
							"statusBarItemName": "Zen",
							"description": "for a zen-like experience, disables many visual features",
							"codeLens": false,
							"currentLine": false,
							"hovers": false,
							"statusBar": false
						},
						"review": {
							"name": "Review",
							"statusBarItemName": "Reviewing",
							"description": "for reviewing code, enables many visual features",
							"codeLens": true,
							"currentLine": true,
							"hovers": true
						}
					},
					"markdownDescription": "Specifies the user-defined GitLens modes",
					"scope": "window"
				},
				"gitlens.outputLevel": {
					"type": "string",
					"default": "errors",
					"enum": [
						"silent",
						"errors",
						"verbose",
						"debug"
					],
					"enumDescriptions": [
						"Logs nothing",
						"Logs only errors",
						"Logs all errors, warnings, and messages",
						"Logs all errors, warnings, and messages with extra context useful for debugging"
					],
					"markdownDescription": "Specifies how much (if any) output will be sent to the GitLens output channel",
					"scope": "window"
				},
				"gitlens.partners": {
					"type": [
						"object",
						"null"
					],
					"additionalProperties": {
						"type": "object",
						"properties": {
							"enabled": {
								"type": "boolean",
								"default": true,
								"description": "Specifies whether the partner integration should be shown"
							}
						},
						"additionalProperties": true,
						"description": "Specifies the configuration of a partner integration"
					},
					"default": null,
					"description": "Specifies the configuration of a partner integration",
					"scope": "window"
				},
				"gitlens.remotes": {
					"type": [
						"array",
						"null"
					],
					"default": null,
					"items": {
						"type": "object",
						"required": [
							"type"
						],
						"oneOf": [
							{
								"required": [
									"domain"
								]
							},
							{
								"required": [
									"regex"
								]
							}
						],
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"Custom",
									"Bitbucket",
									"BitbucketServer",
									"GitHub",
									"GitLab"
								],
								"description": "Specifies the type of the custom remote service"
							},
							"domain": {
								"type": "string",
								"description": "Specifies the domain name of the custom remote service"
							},
							"regex": {
								"type": "string",
								"description": "Specifies a regular expression to capture the \"domain name\" and \"path\" of the custom remote service"
							},
							"name": {
								"type": "string",
								"description": "Specifies an optional friendly name for the custom remote service"
							},
							"protocol": {
								"type": "string",
								"default": "https",
								"description": "Specifies an optional url protocol for the custom remote service"
							},
							"urls": {
								"type": "object",
								"required": [
									"repository",
									"branches",
									"branch",
									"commit",
									"file",
									"fileInCommit",
									"fileInBranch",
									"fileLine",
									"fileRange"
								],
								"properties": {
									"repository": {
										"type": "string",
										"markdownDescription": "Specifies the format of a respository url for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path"
									},
									"branches": {
										"type": "string",
										"markdownDescription": "Specifies the format of a branches url for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${branch}` &mdash; branch"
									},
									"branch": {
										"type": "string",
										"markdownDescription": "Specifies the format of a branch url for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${branch}` &mdash; branch"
									},
									"commit": {
										"type": "string",
										"markdownDescription": "Specifies the format of a commit url for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${id}` &mdash; commit SHA"
									},
									"file": {
										"type": "string",
										"markdownDescription": "Specifies the format of a file url for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${file}` &mdash; file name\\\n`${line}` &mdash; formatted line information"
									},
									"fileInBranch": {
										"type": "string",
										"markdownDescription": "Specifies the format of a branch file url for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${file}` &mdash; file name\\\n`${branch}` &mdash; branch\\\n`${line}` &mdash; formatted line information"
									},
									"fileInCommit": {
										"type": "string",
										"markdownDescription": "Specifies the format of a commit file url for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${file}` &mdash; file name\\\n`${id}` &mdash; commit SHA\\\n`${line}` &mdash; formatted line information"
									},
									"fileLine": {
										"type": "string",
										"markdownDescription": "Specifies the format of a line in a file url for the custom remote service\n\nAvailable tokens\\\n`${line}` &mdash; line"
									},
									"fileRange": {
										"type": "string",
										"markdownDescription": "Specifies the format of a range in a file url for the custom remote service\n\nAvailable tokens\\\n`${start}` &mdash; starting line\\\n`${end}` &mdash; ending line"
									}
								},
								"additionalProperties": false
							}
						}
					},
					"uniqueItems": true,
					"markdownDescription": "Specifies user-defined remote (code-hosting) services or custom domains for built-in remote services",
					"scope": "resource"
				},
				"gitlens.showWelcomeOnInstall": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show the Welcome (Quick Setup) experience on first install",
					"scope": "window"
				},
				"gitlens.showWhatsNewAfterUpgrades": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show the What's New notification after upgrading to new feature releases",
					"scope": "window"
				},
				"gitlens.sortBranchesBy": {
					"type": "string",
					"default": "name:asc",
					"enum": [
						"name:asc",
						"name:desc",
						"date:desc",
						"date:asc"
					],
					"enumDescriptions": [
						"Sorts branches by name in ascending order",
						"Sorts branches by name in descending order",
						"Sorts branches by the most recent commit date in descending order",
						"Sorts branches by the most recent commit date in ascending order"
					],
					"markdownDescription": "Specifies how branches are sorted in quick pick menus and views",
					"scope": "window"
				},
				"gitlens.sortTagsBy": {
					"type": "string",
					"default": "date:desc",
					"enum": [
						"name:asc",
						"name:desc",
						"date:desc",
						"date:asc"
					],
					"enumDescriptions": [
						"Sorts tags by name in ascending order",
						"Sorts tags by name in descending order",
						"Sorts tags by date in descending order",
						"Sorts tags by date in ascending order"
					],
					"markdownDescription": "Specifies how tags are sorted in quick pick menus and views",
					"scope": "window"
				},
				"gitlens.statusBar.alignment": {
					"type": "string",
					"default": "right",
					"enum": [
						"left",
						"right"
					],
					"enumDescriptions": [
						"Aligns to the left",
						"Aligns to the right"
					],
					"markdownDescription": "Specifies the blame alignment in the status bar",
					"scope": "window"
				},
				"gitlens.statusBar.command": {
					"type": "string",
					"default": "gitlens.showQuickCommitDetails",
					"enum": [
						"gitlens.toggleFileBlame",
						"gitlens.diffWithPrevious",
						"gitlens.diffWithWorking",
						"gitlens.toggleCodeLens",
						"gitlens.revealCommitInView",
						"gitlens.showCommitsInView",
						"gitlens.showQuickCommitDetails",
						"gitlens.showQuickCommitFileDetails",
						"gitlens.showQuickFileHistory",
						"gitlens.showQuickRepoHistory"
					],
					"enumDescriptions": [
						"Toggles file blame annotations",
						"Compares the current line commit with the previous",
						"Compares the current line commit with the working tree",
						"Toggles Git code lens",
						"Reveals the commit in the Side Bar",
						"Searches for the commit",
						"Shows a commit details quick pick",
						"Shows a commit file details quick pick",
						"Shows a file history quick pick",
						"Shows a branch history quick pick"
					],
					"markdownDescription": "Specifies the command to be executed when the blame status bar item is clicked",
					"scope": "window"
				},
				"gitlens.statusBar.dateFormat": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
					"scope": "window"
				},
				"gitlens.statusBar.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide blame information in the status bar",
					"scope": "window"
				},
				"gitlens.statusBar.format": {
					"type": "string",
					"default": "${author}, ${agoOrDate}${' via 'pullRequest}",
					"markdownDescription": "Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.statusBar.dateFormat#` setting",
					"scope": "window"
				},
				"gitlens.statusBar.pullRequests.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the status bar. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.statusBar.reduceFlicker": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar \"flashing\"",
					"scope": "window"
				},
				"gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": {
					"type": "string",
					"default": "$(ellipsis)",
					"markdownDescription": "Specifies the string to be shown in place of both the _recent change_ and _authors_ code lens when there are unsaved changes",
					"scope": "window"
				},
				"gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": {
					"type": "string",
					"default": "$(ellipsis)",
					"markdownDescription": "Specifies the string to be shown in place of the _recent change_ code lens when there are unsaved changes",
					"scope": "window"
				},
				"gitlens.strings.codeLens.unsavedChanges.authorsOnly": {
					"type": "string",
					"default": "$(ellipsis)",
					"markdownDescription": "Specifies the string to be shown in place of the _authors_ code lens when there are unsaved changes",
					"scope": "window"
				},
				"gitlens.terminalLinks.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to enable terminal links &mdash; autolinks in the integrated terminal to quickly jump to more details for commits, branches, tags, and more",
					"scope": "window"
				},
				"gitlens.views.branches.avatars": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Branches_ view",
					"scope": "window"
				},
				"gitlens.views.branches.branches.layout": {
					"type": "string",
					"default": "tree",
					"enum": [
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Displays branches as a list",
						"Displays branches as a tree when branch names contain slashes `/`"
					],
					"markdownDescription": "Specifies how the _Branches_ view will display branches",
					"scope": "window"
				},
				"gitlens.views.branches.files.compact": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Branches_ view. Only applies when `#gitlens.views.branches.files.layout#` is set to `tree` or `auto`",
					"scope": "window"
				},
				"gitlens.views.branches.files.layout": {
					"type": "string",
					"default": "auto",
					"enum": [
						"auto",
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.branches.files.threshold#` value and the number of files at each nesting level",
						"Displays files as a list",
						"Displays files as a tree"
					],
					"markdownDescription": "Specifies how the _Branches_ view will display files",
					"scope": "window"
				},
				"gitlens.views.branches.files.threshold": {
					"type": "number",
					"default": 5,
					"markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Branches_ view. Only applies when `#gitlens.views.branches.files.layout#` is set to `auto`",
					"scope": "window"
				},
				"gitlens.views.branches.pullRequests.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to query for pull requests associated with branches and commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.branches.pullRequests.showForBranches": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show pull requests (if any) associated with branches in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.branches.pullRequests.showForCommits": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.branches.reveal": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to reveal branches in the _Branches_ view, otherwise they revealed in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.branches.showBranchComparison": {
					"anyOf": [
						{
							"enum": [
								false
							]
						},
						{
							"type": "string",
							"enum": [
								"branch"
							],
							"enumDescriptions": [
								"Compares the branch with a user-selected reference"
							]
						}
					],
					"default": "branch",
					"markdownDescription": "Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) in the _Branches_ view",
					"scope": "window"
				},
				"gitlens.views.commitFileFormat": {
					"deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.label` instead",
					"markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.label#` instead"
				},
				"gitlens.views.commitFileDescriptionFormat": {
					"deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.description` instead",
					"markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.description#` instead"
				},
				"gitlens.views.commitFormat": {
					"deprecationMessage": "Deprecated. Use `gitlens.views.formats.commits.label` instead",
					"markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.commits.files.label#` instead"
				},
				"gitlens.views.commitDescriptionFormat": {
					"deprecationMessage": "Deprecated. Use `gitlens.views.formats.commits.description` instead",
					"markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.commits.description#` instead"
				},
				"gitlens.views.commits.avatars": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Commits_ view",
					"scope": "window"
				},
				"gitlens.views.commits.files.compact": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Commits_ view. Only applies when `#gitlens.views.commits.files.layout#` is set to `tree` or `auto`",
					"scope": "window"
				},
				"gitlens.views.commits.files.layout": {
					"type": "string",
					"default": "auto",
					"enum": [
						"auto",
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.commits.files.threshold#` value and the number of files at each nesting level",
						"Displays files as a list",
						"Displays files as a tree"
					],
					"markdownDescription": "Specifies how the _Commits_ view will display files",
					"scope": "window"
				},
				"gitlens.views.commits.files.threshold": {
					"type": "number",
					"default": 5,
					"markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commits_ view. Only applies when `#gitlens.views.commits.files.layout#` is set to `auto`",
					"scope": "window"
				},
				"gitlens.views.commits.pullRequests.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to query for pull requests associated with the current branch and commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.commits.pullRequests.showForBranches": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show pull requests (if any) associated with the current branch in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.commits.pullRequests.showForCommits": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.commits.reveal": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to reveal commits in the _Commits_ view, otherwise they revealed in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.commits.showBranchComparison": {
					"anyOf": [
						{
							"enum": [
								false
							]
						},
						{
							"type": "string",
							"enum": [
								"branch",
								"working"
							],
							"enumDescriptions": [
								"Compares the current branch with a user-selected reference",
								"Compares the working tree with a user-selected reference"
							]
						}
					],
					"default": "working",
					"markdownDescription": "Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Commits_ view",
					"scope": "window"
				},
				"gitlens.views.contributors.avatars": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Contributors_ view",
					"scope": "window"
				},
				"gitlens.views.contributors.files.compact": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Contributors_ view. Only applies when `#gitlens.views.contributors.files.layout#` is set to `tree` or `auto`",
					"scope": "window"
				},
				"gitlens.views.contributors.files.layout": {
					"type": "string",
					"default": "auto",
					"enum": [
						"auto",
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.contributors.files.threshold#` value and the number of files at each nesting level",
						"Displays files as a list",
						"Displays files as a tree"
					],
					"markdownDescription": "Specifies how the _Contributors_ view will display files",
					"scope": "window"
				},
				"gitlens.views.contributors.files.threshold": {
					"type": "number",
					"default": 5,
					"markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Contributors_ view. Only applies when `#gitlens.views.contributors.files.layout#` is set to `auto`",
					"scope": "window"
				},
				"gitlens.views.contributors.pullRequests.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to query for pull requests associated with branches and commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.contributors.pullRequests.showForCommits": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.defaultItemLimit": {
					"type": "number",
					"default": 10,
					"markdownDescription": "Specifies the default number of items to show in a view list. Use 0 to specify no limit",
					"scope": "window"
				},
				"gitlens.views.formats.commits.label": {
					"type": "string",
					"default": "${❰ tips ❱➤  }${message}",
					"markdownDescription": "Specifies the format of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
					"scope": "window"
				},
				"gitlens.views.formats.commits.description": {
					"type": "string",
					"default": "${author, }${agoOrDate}",
					"markdownDescription": "Specifies the description format of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
					"scope": "window"
				},
				"gitlens.views.formats.files.label": {
					"type": "string",
					"default": "${working  }${file}",
					"markdownDescription": "Specifies the format of a file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
					"scope": "window"
				},
				"gitlens.views.formats.files.description": {
					"type": "string",
					"default": "${directory}${  ←  originalPath}",
					"markdownDescription": "Specifies the description format of a file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
					"scope": "window"
				},
				"gitlens.views.formats.stashes.label": {
					"type": "string",
					"default": "${message}",
					"markdownDescription": "Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
					"scope": "window"
				},
				"gitlens.views.formats.stashes.description": {
					"type": "string",
					"default": "${agoOrDate}",
					"markdownDescription": "Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
					"scope": "window"
				},
				"gitlens.views.fileHistory.avatars": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show avatar images instead of status icons in the _File History_ view",
					"scope": "window"
				},
				"gitlens.views.lineHistory.avatars": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show avatar images instead of status icons in the _Line History_ view",
					"scope": "window"
				},
				"gitlens.views.lineHistory.enabled": {
					"deprecationMessage": "Deprecated. This setting is no longer used",
					"markdownDeprecationMessage": "Deprecated. This setting is no longer used"
				},
				"gitlens.views.pageItemLimit": {
					"type": "number",
					"default": 40,
					"markdownDescription": "Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit",
					"scope": "window"
				},
				"gitlens.views.remotes.avatars": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Remotes_ view",
					"scope": "window"
				},
				"gitlens.views.remotes.branches.layout": {
					"type": "string",
					"default": "tree",
					"enum": [
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Displays branches as a list",
						"Displays branches as a tree when branch names contain slashes `/`"
					],
					"markdownDescription": "Specifies how the _Remotes_ view will display branches",
					"scope": "window"
				},
				"gitlens.views.remotes.files.compact": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Remotes_ view. Only applies when `#gitlens.views.remotes.files.layout#` is set to `tree` or `auto`",
					"scope": "window"
				},
				"gitlens.views.remotes.files.layout": {
					"type": "string",
					"default": "auto",
					"enum": [
						"auto",
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.remotes.files.threshold#` value and the number of files at each nesting level",
						"Displays files as a list",
						"Displays files as a tree"
					],
					"markdownDescription": "Specifies how the _Remotes_ view will display files",
					"scope": "window"
				},
				"gitlens.views.remotes.files.threshold": {
					"type": "number",
					"default": 5,
					"markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Remotes_ view. Only applies when `#gitlens.views.remotes.files.layout#` is set to `auto`",
					"scope": "window"
				},
				"gitlens.views.remotes.pullRequests.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to query for pull requests associated with branches and commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.remotes.pullRequests.showForBranches": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show pull requests (if any) associated with branches in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.remotes.pullRequests.showForCommits": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.remotes.reveal": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to reveal remotes in the _Remotes_ view, otherwise they revealed in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.autoRefresh": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes",
					"scope": "window"
				},
				"gitlens.views.repositories.autoReveal": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files",
					"scope": "window"
				},
				"gitlens.views.repositories.avatars": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.branches.layout": {
					"type": "string",
					"default": "tree",
					"enum": [
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Displays branches as a list",
						"Displays branches as a tree when branch names contain slashes `/`"
					],
					"markdownDescription": "Specifies how the _Repositories_ view will display branches",
					"scope": "window"
				},
				"gitlens.views.repositories.branches.showBranchComparison": {
					"anyOf": [
						{
							"enum": [
								false
							]
						},
						{
							"type": "string",
							"enum": [
								"branch"
							],
							"enumDescriptions": [
								"Compares the branch with a user-selected reference"
							]
						}
					],
					"default": "branch",
					"markdownDescription": "Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) under each branch in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.compact": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Specifies whether to show the _Repositories_ view in a compact display density",
					"scope": "window"
				},
				"gitlens.views.repositories.enabled": {
					"deprecationMessage": "Deprecated. This setting is no longer used",
					"markdownDeprecationMessage": "Deprecated. This setting is no longer used"
				},
				"gitlens.views.repositories.files.compact": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `#gitlens.views.repositories.files.layout#` is set to `tree` or `auto`",
					"scope": "window"
				},
				"gitlens.views.repositories.files.layout": {
					"type": "string",
					"default": "auto",
					"enum": [
						"auto",
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.repositories.files.threshold#` value and the number of files at each nesting level",
						"Displays files as a list",
						"Displays files as a tree"
					],
					"markdownDescription": "Specifies how the _Repositories_ view will display files",
					"scope": "window"
				},
				"gitlens.views.repositories.files.threshold": {
					"type": "number",
					"default": 5,
					"markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `#gitlens.views.repositories.files.layout#` is set to `auto`",
					"scope": "window"
				},
				"gitlens.views.repositories.includeWorkingTree": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Specifies whether to include working tree file status for each repository in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.pullRequests.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to query for pull requests associated with branches and commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.repositories.pullRequests.showForBranches": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show pull requests (if any) associated with branches in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.repositories.pullRequests.showForCommits": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.repositories.showBranchComparison": {
					"anyOf": [
						{
							"enum": [
								false
							]
						},
						{
							"type": "string",
							"enum": [
								"branch",
								"working"
							],
							"enumDescriptions": [
								"Compares the current branch with a user-selected reference",
								"Compares the working tree with a user-selected reference"
							]
						}
					],
					"default": "working",
					"markdownDescription": "Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.showBranches": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show the branches for each repository in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.showCommits": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show the commits on the current branch for each repository in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.showContributors": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show the contributors for each repository in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.showIncomingActivity": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Specifies whether to show the experimental incoming activity for each repository in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.showRemotes": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show the remotes for each repository in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.showStashes": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show the stashes for each repository in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.showTags": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show the tags for each repository in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.repositories.showUpstreamStatus": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show the upstream status of the current branch for each repository in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.searchAndCompare.avatars": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Search & Compare_ view",
					"scope": "window"
				},
				"gitlens.views.searchAndCompare.files.compact": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Search & Compare_ view. Only applies when `#gitlens.views.searchAndCompare.files.layout#` is set to `tree` or `auto`",
					"scope": "window"
				},
				"gitlens.views.searchAndCompare.files.layout": {
					"type": "string",
					"default": "auto",
					"enum": [
						"auto",
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.searchAndCompare.files.threshold#` value and the number of files at each nesting level",
						"Displays files as a list",
						"Displays files as a tree"
					],
					"markdownDescription": "Specifies how the _Search & Compare_ view will display files",
					"scope": "window"
				},
				"gitlens.views.searchAndCompare.files.threshold": {
					"type": "number",
					"default": 5,
					"markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search & Compare_ view. Only applies when `#gitlens.views.searchAndCompare.files.layout#` is set to `auto`",
					"scope": "window"
				},
				"gitlens.views.searchAndCompare.pullRequests.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to query for pull requests associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.searchAndCompare.pullRequests.showForCommits": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)",
					"scope": "window"
				},
				"gitlens.views.showRelativeDateMarkers": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views",
					"scope": "window"
				},
				"gitlens.views.stashFileFormat": {
					"deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.label` instead",
					"markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.label#` instead"
				},
				"gitlens.views.stashFileDescriptionFormat": {
					"deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.description` instead",
					"markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.description#` instead"
				},
				"gitlens.views.stashFormat": {
					"deprecationMessage": "Deprecated. Use `gitlens.views.formats.stashes.label` instead",
					"markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.stashes.files.label#` instead"
				},
				"gitlens.views.stashDescriptionFormat": {
					"deprecationMessage": "Deprecated. Use `gitlens.views.formats.stashes.description` instead",
					"markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.stashes.description#` instead"
				},
				"gitlens.views.stashes.files.compact": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Stashes_ view. Only applies when `#gitlens.views.stashes.files.layout#` is set to `tree` or `auto`",
					"scope": "window"
				},
				"gitlens.views.stashes.files.layout": {
					"type": "string",
					"default": "auto",
					"enum": [
						"auto",
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.stashes.files.threshold#` value and the number of files at each nesting level",
						"Displays files as a list",
						"Displays files as a tree"
					],
					"markdownDescription": "Specifies how the _Stashes_ view will display files",
					"scope": "window"
				},
				"gitlens.views.stashes.files.threshold": {
					"type": "number",
					"default": 5,
					"markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Stashes_ view. Only applies when `#gitlens.views.stashes.files.layout#` is set to `auto`",
					"scope": "window"
				},
				"gitlens.views.stashes.reveal": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to reveal stashes in the _Stashes_ view, otherwise they revealed in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.views.statusFileFormat": {
					"deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.label` instead",
					"markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.label#` instead"
				},
				"gitlens.views.statusFileDescriptionFormat": {
					"deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.description` instead",
					"markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.description#` instead"
				},
				"gitlens.views.tags.avatars": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Tags_ view",
					"scope": "window"
				},
				"gitlens.views.tags.branches.layout": {
					"type": "string",
					"default": "tree",
					"enum": [
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Displays tags as a list",
						"Displays tags as a tree when tags names contain slashes `/`"
					],
					"markdownDescription": "Specifies how the _Tags_ view will display tags",
					"scope": "window"
				},
				"gitlens.views.tags.files.compact": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Tags_ view. Only applies when `#gitlens.views.tags.files.layout#` is set to `tree` or `auto`",
					"scope": "window"
				},
				"gitlens.views.tags.files.layout": {
					"type": "string",
					"default": "auto",
					"enum": [
						"auto",
						"list",
						"tree"
					],
					"enumDescriptions": [
						"Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.tags.files.threshold#` value and the number of files at each nesting level",
						"Displays files as a list",
						"Displays files as a tree"
					],
					"markdownDescription": "Specifies how the _Tags_ view will display files",
					"scope": "window"
				},
				"gitlens.views.tags.files.threshold": {
					"type": "number",
					"default": 5,
					"markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Tags_ view. Only applies when `#gitlens.views.tags.files.layout#` is set to `auto`",
					"scope": "window"
				},
				"gitlens.views.tags.reveal": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to reveal tags in the _Tags_ view, otherwise they revealed in the _Repositories_ view",
					"scope": "window"
				},
				"gitlens.advanced.abbreviatedShaLength": {
					"type": "number",
					"default": 7,
					"markdownDescription": "Specifies the length of abbreviated commit SHAs",
					"scope": "window"
				},
				"gitlens.advanced.abbreviateShaOnCopy": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Specifies whether to copy full or abbreviated commit SHAs to the clipboard. Abbreviates to the length of `#gitlens.advanced.abbreviatedShaLength#`.",
					"scope": "window"
				},
				"gitlens.advanced.blame.customArguments": {
					"type": [
						"array",
						"null"
					],
					"default": null,
					"items": {
						"type": "string"
					},
					"markdownDescription": "Specifies additional arguments to pass to the `git blame` command",
					"scope": "resource"
				},
				"gitlens.advanced.blame.delayAfterEdit": {
					"type": "number",
					"default": 5000,
					"markdownDescription": "Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait",
					"scope": "window"
				},
				"gitlens.advanced.blame.sizeThresholdAfterEdit": {
					"type": "number",
					"default": 5000,
					"markdownDescription": "Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum",
					"scope": "window"
				},
				"gitlens.advanced.caching.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether git output will be cached — changing the default is not recommended",
					"scope": "window"
				},
				"gitlens.advanced.externalDiffTool": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"markdownDescription": "Specifies an optional external diff tool to use when comparing files. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).",
					"scope": "window"
				},
				"gitlens.advanced.externalDirectoryDiffTool": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"markdownDescription": "Specifies an optional external diff tool to use when comparing directories. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).",
					"scope": "window"
				},
				"gitlens.advanced.fileHistoryFollowsRenames": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Specifies whether file histories will follow renames — will affect how merge commits are shown in histories",
					"scope": "window"
				},
				"gitlens.advanced.fileHistoryShowAllBranches": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Specifies whether file histories will show commits from all branches",
					"scope": "window"
				},
				"gitlens.advanced.maxListItems": {
					"type": "number",
					"default": 200,
					"markdownDescription": "Specifies the maximum number of items to show in a list. Use 0 to specify no maximum",
					"scope": "window"
				},
				"gitlens.advanced.maxSearchItems": {
					"type": "number",
					"default": 200,
					"markdownDescription": "Specifies the maximum number of items to show in a search. Use 0 to specify no maximum",
					"scope": "window"
				},
				"gitlens.advanced.messages": {
					"type": "object",
					"default": {
						"suppressCommitHasNoPreviousCommitWarning": false,
						"suppressCommitNotFoundWarning": false,
						"suppressCreatePullRequestPrompt": false,
						"suppressFileNotUnderSourceControlWarning": false,
						"suppressGitDisabledWarning": false,
						"suppressGitVersionWarning": false,
						"suppressImproperWorkspaceCasingWarning": false,
						"suppressLineUncommittedWarning": false,
						"suppressNoRepositoryWarning": false,
						"suppressRebaseSwitchToTextWarning": false
					},
					"properties": {
						"suppressCommitHasNoPreviousCommitWarning": {
							"type": "boolean",
							"default": false
						},
						"suppressCommitNotFoundWarning": {
							"type": "boolean",
							"default": false
						},
						"suppressCreatePullRequestPrompt": {
							"type": "boolean",
							"default": false
						},
						"suppressFileNotUnderSourceControlWarning": {
							"type": "boolean",
							"default": false
						},
						"suppressGitDisabledWarning": {
							"type": "boolean",
							"default": false
						},
						"suppressGitVersionWarning": {
							"type": "boolean",
							"default": false
						},
						"suppressImproperWorkspaceCasingWarning": {
							"type": "boolean",
							"default": false
						},
						"suppressLineUncommittedWarning": {
							"type": "boolean",
							"default": false
						},
						"suppressNoRepositoryWarning": {
							"type": "boolean",
							"default": false
						},
						"suppressRebaseSwitchToTextWarning": {
							"type": "boolean",
							"default": false
						}
					},
					"additionalProperties": false,
					"markdownDescription": "Specifies which messages should be suppressed",
					"scope": "window"
				},
				"gitlens.advanced.quickPick.closeOnFocusOut": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)",
					"scope": "window"
				},
				"gitlens.advanced.repositorySearchDepth": {
					"type": "number",
					"default": 1,
					"markdownDescription": "Specifies how many folders deep to search for repositories",
					"scope": "resource"
				},
				"gitlens.advanced.similarityThreshold": {
					"type": [
						"number",
						"null"
					],
					"default": null,
					"markdownDescription": "Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename",
					"scope": "window"
				},
				"gitlens.advanced.useSymmetricDifferenceNotation": {
					"deprecationMessage": "Deprecated. This setting is no longer used",
					"markdownDescription": "Deprecated. This setting is no longer used"
				}
			}
		},
		"configurationDefaults": {
			"[azure-pipelines]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			},
			"[ansible]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			},
			"[css]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			},
			"[html]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			},
			"[json]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			},
			"[jsonc]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			},
			"[less]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			},
			"[postcss]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			},
			"[python]": {
				"gitlens.codeLens.symbolScopes": [
					"!Module"
				]
			},
			"[scss]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			},
			"[stylus]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			},
			"[vue]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			},
			"[yaml]": {
				"gitlens.codeLens.scopes": [
					"document"
				]
			}
		},
		"colors": [
			{
				"id": "gitlens.gutterBackgroundColor",
				"description": "Specifies the background color of the gutter blame annotations",
				"defaults": {
					"dark": "#FFFFFF13",
					"light": "#0000000C",
					"highContrast": "#FFFFFF13"
				}
			},
			{
				"id": "gitlens.gutterForegroundColor",
				"description": "Specifies the foreground color of the gutter blame annotations",
				"defaults": {
					"dark": "#BEBEBE",
					"light": "#747474",
					"highContrast": "#BEBEBE"
				}
			},
			{
				"id": "gitlens.gutterUncommittedForegroundColor",
				"description": "Specifies the foreground color of an uncommitted line in the gutter blame annotations",
				"defaults": {
					"dark": "#00BCF299",
					"light": "#00BCF299",
					"highContrast": "#00BCF2FF"
				}
			},
			{
				"id": "gitlens.trailingLineBackgroundColor",
				"description": "Specifies the background color of the blame annotation for the current line",
				"defaults": {
					"dark": "#00000000",
					"light": "#00000000",
					"highContrast": "#00000000"
				}
			},
			{
				"id": "gitlens.trailingLineForegroundColor",
				"description": "Specifies the foreground color of the blame annotation for the current line",
				"defaults": {
					"dark": "#99999959",
					"light": "#99999959",
					"highContrast": "#99999999"
				}
			},
			{
				"id": "gitlens.lineHighlightBackgroundColor",
				"description": "Specifies the background color of the associated line highlights in blame annotations",
				"defaults": {
					"dark": "#00BCF233",
					"light": "#00BCF233",
					"highContrast": "#00BCF233"
				}
			},
			{
				"id": "gitlens.lineHighlightOverviewRulerColor",
				"description": "Specifies the overview ruler color of the associated line highlights in blame annotations",
				"defaults": {
					"dark": "#00BCF299",
					"light": "#00BCF299",
					"highContrast": "#00BCF299"
				}
			},
			{
				"id": "gitlens.closedPullRequestIconColor",
				"description": "Specifies the icon color of closed pull requests in the GitLens views",
				"defaults": {
					"dark": "#f85149",
					"light": "#f85149",
					"highContrast": "#ff544b"
				}
			},
			{
				"id": "gitlens.openPullRequestIconColor",
				"description": "Specifies the icon color of open pull requests in the GitLens views",
				"defaults": {
					"dark": "#56d364",
					"light": "#56d364",
					"highContrast": "#68ff79"
				}
			},
			{
				"id": "gitlens.mergedPullRequestIconColor",
				"description": "Specifies the icon color of merged pull requests in the GitLens views",
				"defaults": {
					"dark": "#995dff",
					"light": "#995dff",
					"highContrast": "#8945ff"
				}
			},
			{
				"id": "gitlens.unpushlishedChangesIconColor",
				"description": "Specifies the icon color of unpublished changes in the GitLens views",
				"defaults": {
					"dark": "#35b15e",
					"light": "#35b15e",
					"highContrast": "#4dff88"
				}
			},
			{
				"id": "gitlens.unpublishedCommitIconColor",
				"description": "Specifies the icon color of unpublished commits in the GitLens views",
				"defaults": {
					"dark": "#35b15e",
					"light": "#35b15e",
					"highContrast": "#4dff88"
				}
			},
			{
				"id": "gitlens.unpulledChangesIconColor",
				"description": "Specifies the icon color of unpulled changes in the GitLens views",
				"defaults": {
					"dark": "#b15e35",
					"light": "#b15e35",
					"highContrast": "#ff874c"
				}
			}
		],
		"commands": [
			{
				"command": "gitlens.supportGitLens",
				"title": "Sponsor GitLens",
				"category": "GitLens",
				"icon": "$(heart)"
			},
			{
				"command": "gitlens.showSettingsPage",
				"title": "Open Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showSettingsPage#views",
				"title": "Open Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showSettingsPage#branches-view",
				"title": "Open View Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showSettingsPage#commits-view",
				"title": "Open View Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showSettingsPage#contributors-view",
				"title": "Open View Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showSettingsPage#file-history-view",
				"title": "Open View Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showSettingsPage#line-history-view",
				"title": "Open View Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showSettingsPage#remotes-view",
				"title": "Open View Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showSettingsPage#repositories-view",
				"title": "Open View Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showSettingsPage#search-compare-view",
				"title": "Open View Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showSettingsPage#stashes-view",
				"title": "Open View Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showSettingsPage#tags-view",
				"title": "Open View Settings",
				"category": "GitLens",
				"icon": "$(gear)"
			},
			{
				"command": "gitlens.showWelcomePage",
				"title": "Welcome (Quick Setup)",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showBranchesView",
				"title": "Show Branches View",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showCommitsView",
				"title": "Show Commits View",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showContributorsView",
				"title": "Show Contributors View",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showFileHistoryView",
				"title": "Show File History View",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showLineHistoryView",
				"title": "Show Line History View",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showRemotesView",
				"title": "Show Remotes View",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showRepositoriesView",
				"title": "Show Repositories View",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showSearchAndCompareView",
				"title": "Show Search And Compare Commits View",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showStashesView",
				"title": "Show Stashes View",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showTagsView",
				"title": "Show Tags View",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showWelcomeView",
				"title": "Show Welcome View",
				"category": "GitLens"
			},
			{
				"command": "gitlens.closeUpdatesView",
				"title": "Close",
				"category": "GitLens",
				"icon": "$(close)"
			},
			{
				"command": "gitlens.closeWelcomeView",
				"title": "Close",
				"category": "GitLens",
				"icon": "$(close)"
			},
			{
				"command": "gitlens.compareWith",
				"title": "Compare References...",
				"category": "GitLens",
				"icon": "$(compare-changes)"
			},
			{
				"command": "gitlens.compareHeadWith",
				"title": "Compare HEAD with...",
				"category": "GitLens",
				"icon": "$(compare-changes)"
			},
			{
				"command": "gitlens.compareWorkingWith",
				"title": "Compare Working Tree with...",
				"category": "GitLens",
				"icon": "$(compare-changes)"
			},
			{
				"command": "gitlens.diffDirectory",
				"title": "Open Directory Compare (difftool) with...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.diffDirectoryWithHead",
				"title": "Open Directory Compare (difftool)",
				"category": "GitLens"
			},
			{
				"command": "gitlens.diffWithNext",
				"title": "Open Changes with Next Revision",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-next-commit.svg",
					"light": "images/light/icon-next-commit.svg"
				},
				"enablement": "gitlens:activeFileStatus =~ /revision/"
			},
			{
				"command": "gitlens.diffWithNextInDiffLeft",
				"title": "Open Changes with Next Revision",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-next-commit.svg",
					"light": "images/light/icon-next-commit.svg"
				},
				"enablement": "gitlens:activeFileStatus =~ /revision/"
			},
			{
				"command": "gitlens.diffWithNextInDiffRight",
				"title": "Open Changes with Next Revision",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-next-commit.svg",
					"light": "images/light/icon-next-commit.svg"
				},
				"enablement": "gitlens:activeFileStatus =~ /revision/"
			},
			{
				"command": "gitlens.diffWithPrevious",
				"title": "Open Changes with Previous Revision",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-prev-commit.svg",
					"light": "images/light/icon-prev-commit.svg"
				}
			},
			{
				"command": "gitlens.diffWithPreviousInDiffLeft",
				"title": "Open Changes with Previous Revision",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-prev-commit.svg",
					"light": "images/light/icon-prev-commit.svg"
				}
			},
			{
				"command": "gitlens.diffWithPreviousInDiffRight",
				"title": "Open Changes with Previous Revision",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-prev-commit.svg",
					"light": "images/light/icon-prev-commit.svg"
				}
			},
			{
				"command": "gitlens.diffLineWithPrevious",
				"title": "Open Line Changes with Previous Revision",
				"category": "GitLens"
			},
			{
				"command": "gitlens.diffWithRevision",
				"title": "Open Changes with Revision...",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-prev-commit-menu.svg",
					"light": "images/light/icon-prev-commit-menu.svg"
				}
			},
			{
				"command": "gitlens.diffWithRevisionFrom",
				"title": "Open Changes with Branch or Tag...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.diffWithWorking",
				"title": "Open Changes with Working File",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-compare-ref-working.svg",
					"light": "images/light/icon-compare-ref-working.svg"
				}
			},
			{
				"command": "gitlens.diffWithWorkingInDiffLeft",
				"title": "Open Changes with Working File",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-compare-ref-working.svg",
					"light": "images/light/icon-compare-ref-working.svg"
				}
			},
			{
				"command": "gitlens.diffWithWorkingInDiffRight",
				"title": "Open Changes with Working File",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-compare-ref-working.svg",
					"light": "images/light/icon-compare-ref-working.svg"
				}
			},
			{
				"command": "gitlens.diffLineWithWorking",
				"title": "Open Line Changes with Working File",
				"category": "GitLens"
			},
			{
				"command": "gitlens.disableRebaseEditor",
				"title": "Disable Interactive Rebase Editor",
				"category": "GitLens"
			},
			{
				"command": "gitlens.enableRebaseEditor",
				"title": "Enable Interactive Rebase Editor",
				"category": "GitLens"
			},
			{
				"command": "gitlens.toggleFileBlame",
				"title": "Toggle File Blame",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-git.svg",
					"light": "images/light/icon-git.svg"
				}
			},
			{
				"command": "gitlens.toggleFileBlameInDiffLeft",
				"title": "Toggle File Blame",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-git.svg",
					"light": "images/light/icon-git.svg"
				}
			},
			{
				"command": "gitlens.toggleFileBlameInDiffRight",
				"title": "Toggle File Blame",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-git.svg",
					"light": "images/light/icon-git.svg"
				}
			},
			{
				"command": "gitlens.clearFileAnnotations",
				"title": "Clear File Annotations",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-git-orange.svg",
					"light": "images/light/icon-git-orange.svg"
				}
			},
			{
				"command": "gitlens.computingFileAnnotations",
				"title": "Computing File Annotations...",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-git-progress.svg",
					"light": "images/light/icon-git-progress.svg"
				}
			},
			{
				"command": "gitlens.toggleFileHeatmap",
				"title": "Toggle File Heatmap",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-git.svg",
					"light": "images/light/icon-git.svg"
				}
			},
			{
				"command": "gitlens.toggleFileHeatmapInDiffLeft",
				"title": "Toggle File Heatmap",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-git.svg",
					"light": "images/light/icon-git.svg"
				}
			},
			{
				"command": "gitlens.toggleFileHeatmapInDiffRight",
				"title": "Toggle File Heatmap",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-git.svg",
					"light": "images/light/icon-git.svg"
				}
			},
			{
				"command": "gitlens.toggleFileChanges",
				"title": "Toggle File Changes",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-git.svg",
					"light": "images/light/icon-git.svg"
				}
			},
			{
				"command": "gitlens.toggleLineBlame",
				"title": "Toggle Line Blame",
				"category": "GitLens"
			},
			{
				"command": "gitlens.toggleCodeLens",
				"title": "Toggle Git Code Lens",
				"category": "GitLens"
			},
			{
				"command": "gitlens.gitCommands",
				"title": "Git Command Palette",
				"category": "GitLens"
			},
			{
				"command": "gitlens.switchMode",
				"title": "Switch Mode",
				"category": "GitLens"
			},
			{
				"command": "gitlens.toggleReviewMode",
				"title": "Toggle Review Mode",
				"category": "GitLens"
			},
			{
				"command": "gitlens.toggleZenMode",
				"title": "Toggle Zen Mode",
				"category": "GitLens"
			},
			{
				"command": "gitlens.setViewsLayout",
				"title": "Set Views Layout",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showCommitSearch",
				"title": "Search Commits",
				"category": "GitLens",
				"icon": "$(search)"
			},
			{
				"command": "gitlens.showLastQuickPick",
				"title": "Show Last Opened Quick Pick",
				"category": "GitLens"
			},
			{
				"command": "gitlens.revealCommitInView",
				"title": "Reveal Commit in Side Bar",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showCommitInView",
				"title": "Search for Commit in Side Bar",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showCommitsInView",
				"title": "Search for Commits within Selection",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showFileHistoryInView",
				"title": "Open File History",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showQuickCommitDetails",
				"title": "Show Commit",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showQuickCommitFileDetails",
				"title": "Show Line Commit",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showQuickRevisionDetails",
				"title": "Show Revision Commit",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-commit-horizontal.svg",
					"light": "images/light/icon-commit-horizontal.svg"
				},
				"enablement": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != git"
			},
			{
				"command": "gitlens.showQuickRevisionDetailsInDiffLeft",
				"title": "Show Revision Commit",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-commit-horizontal.svg",
					"light": "images/light/icon-commit-horizontal.svg"
				},
				"enablement": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != git"
			},
			{
				"command": "gitlens.showQuickRevisionDetailsInDiffRight",
				"title": "Show Revision Commit",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-commit-horizontal.svg",
					"light": "images/light/icon-commit-horizontal.svg"
				},
				"enablement": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != git"
			},
			{
				"command": "gitlens.showQuickFileHistory",
				"title": "Show File History",
				"category": "GitLens"
			},
			{
				"command": "gitlens.quickOpenFileHistory",
				"title": "Quick Open File History",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showQuickBranchHistory",
				"title": "Show Branch History",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showQuickRepoHistory",
				"title": "Show Current Branch History",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showQuickRepoStatus",
				"title": "Show Repository Status",
				"category": "GitLens"
			},
			{
				"command": "gitlens.showQuickStashList",
				"title": "Show Stashes",
				"category": "GitLens"
			},
			{
				"command": "gitlens.addAuthors",
				"title": "Add Co-authors",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-person-add.svg",
					"light": "images/light/icon-person-add.svg"
				}
			},
			{
				"command": "gitlens.connectRemoteProvider",
				"title": "Connect to Remote",
				"category": "GitLens",
				"icon": "$(plug)"
			},
			{
				"command": "gitlens.disconnectRemoteProvider",
				"title": "Disconnect from Remote",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-unplug.svg",
					"light": "images/light/icon-unplug.svg"
				}
			},
			{
				"command": "gitlens.resetRemoteConnectionAuthorization",
				"title": "Reset Remote Connection Authorization",
				"category": "GitLens"
			},
			{
				"command": "gitlens.copyCurrentBranch",
				"title": "Copy Current Branch Name",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy.svg",
					"light": "images/light/icon-copy.svg"
				}
			},
			{
				"command": "gitlens.copyMessageToClipboard",
				"title": "Copy Message",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy-message.svg",
					"light": "images/light/icon-copy-message.svg"
				}
			},
			{
				"command": "gitlens.copyShaToClipboard",
				"title": "Copy SHA",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy.svg",
					"light": "images/light/icon-copy.svg"
				}
			},
			{
				"command": "gitlens.closeUnchangedFiles",
				"title": "Close Unchanged Files",
				"category": "GitLens"
			},
			{
				"command": "gitlens.openChangedFiles",
				"title": "Open Changed Files",
				"category": "GitLens"
			},
			{
				"command": "gitlens.openBranchesOnRemote",
				"title": "Open Branches on Remote",
				"category": "GitLens",
				"icon": "$(globe)"
			},
			{
				"command": "gitlens.copyRemoteBranchesUrl",
				"title": "Copy Remote Branches Url",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy-link.svg",
					"light": "images/light/icon-copy-link.svg"
				}
			},
			{
				"command": "gitlens.openBranchOnRemote",
				"title": "Open Branch on Remote",
				"category": "GitLens",
				"icon": "$(globe)"
			},
			{
				"command": "gitlens.copyRemoteBranchUrl",
				"title": "Copy Remote Branch Url",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy-link.svg",
					"light": "images/light/icon-copy-link.svg"
				}
			},
			{
				"command": "gitlens.openCommitOnRemote",
				"title": "Open Commit on Remote",
				"category": "GitLens",
				"icon": "$(globe)"
			},
			{
				"command": "gitlens.copyRemoteCommitUrl",
				"title": "Copy Remote Commit Url",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy-link.svg",
					"light": "images/light/icon-copy-link.svg"
				}
			},
			{
				"command": "gitlens.openComparisonOnRemote",
				"title": "Open Comparison on Remote",
				"category": "GitLens",
				"icon": "$(globe)"
			},
			{
				"command": "gitlens.copyRemoteComparisonUrl",
				"title": "Copy Remote Comparison Url",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy-link.svg",
					"light": "images/light/icon-copy-link.svg"
				}
			},
			{
				"command": "gitlens.openFileFromRemote",
				"title": "Open File from Remote",
				"category": "GitLens"
			},
			{
				"command": "gitlens.openFileOnRemote",
				"title": "Open File on Remote",
				"category": "GitLens",
				"icon": "$(globe)"
			},
			{
				"command": "gitlens.copyRemoteFileUrlToClipboard",
				"title": "Copy Remote File Url",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy-link.svg",
					"light": "images/light/icon-copy-link.svg"
				}
			},
			{
				"command": "gitlens.openFileOnRemoteFrom",
				"title": "Open File on Remote From...",
				"category": "GitLens",
				"icon": "$(globe)"
			},
			{
				"command": "gitlens.copyRemoteFileUrlFrom",
				"title": "Copy Remote File Url From...",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy-link.svg",
					"light": "images/light/icon-copy-link.svg"
				}
			},
			{
				"command": "gitlens.openFileRevision",
				"title": "Open File at Revision...",
				"icon": {
					"dark": "images/dark/icon-open-revision.svg",
					"light": "images/light/icon-open-revision.svg"
				},
				"category": "GitLens"
			},
			{
				"command": "gitlens.openFileRevisionFrom",
				"title": "Open File at Revision from...",
				"icon": {
					"dark": "images/dark/icon-open-revision.svg",
					"light": "images/light/icon-open-revision.svg"
				},
				"category": "GitLens"
			},
			{
				"command": "gitlens.openPullRequestOnRemote",
				"title": "Open Pull Request on Remote",
				"category": "GitLens",
				"icon": "$(globe)"
			},
			{
				"command": "gitlens.copyRemotePullRequestUrl",
				"title": "Copy Pull Request Url",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy-link.svg",
					"light": "images/light/icon-copy-link.svg"
				}
			},
			{
				"command": "gitlens.openAssociatedPullRequestOnRemote",
				"title": "Open Associated Pull Request",
				"category": "GitLens",
				"icon": "$(git-pull-request)"
			},
			{
				"command": "gitlens.openRepoOnRemote",
				"title": "Open Repository on Remote",
				"category": "GitLens",
				"icon": "$(globe)"
			},
			{
				"command": "gitlens.copyRemoteRepositoryUrl",
				"title": "Copy Remote Repository Url",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy-link.svg",
					"light": "images/light/icon-copy-link.svg"
				}
			},
			{
				"command": "gitlens.openRevisionFile",
				"title": "Open File at Revision",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-open-revision.svg",
					"light": "images/light/icon-open-revision.svg"
				},
				"enablement": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != git"
			},
			{
				"command": "gitlens.openRevisionFileInDiffLeft",
				"title": "Open File at Revision",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-open-revision.svg",
					"light": "images/light/icon-open-revision.svg"
				},
				"enablement": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != git"
			},
			{
				"command": "gitlens.openRevisionFileInDiffRight",
				"title": "Open File at Revision",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-open-revision.svg",
					"light": "images/light/icon-open-revision.svg"
				},
				"enablement": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != git"
			},
			{
				"command": "gitlens.openWorkingFile",
				"title": "Open File",
				"category": "GitLens",
				"icon": "$(go-to-file)"
			},
			{
				"command": "gitlens.openWorkingFileInDiffLeft",
				"title": "Open File",
				"category": "GitLens",
				"icon": "$(go-to-file)"
			},
			{
				"command": "gitlens.openWorkingFileInDiffRight",
				"title": "Open File",
				"category": "GitLens",
				"icon": "$(go-to-file)"
			},
			{
				"command": "gitlens.stashApply",
				"title": "Apply Stash",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-stash-pop.svg",
					"light": "images/light/icon-stash-pop.svg"
				}
			},
			{
				"command": "gitlens.views.deleteStash",
				"title": "Delete Stash...",
				"category": "GitLens",
				"icon": "$(trash)"
			},
			{
				"command": "gitlens.stashSave",
				"title": "Stash All Changes",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-stash-save.svg",
					"light": "images/light/icon-stash-save.svg"
				}
			},
			{
				"command": "gitlens.stashSaveFiles",
				"title": "Stash Changes",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-stash-save.svg",
					"light": "images/light/icon-stash-save.svg"
				}
			},
			{
				"command": "gitlens.externalDiff",
				"title": "Open Changes (difftool)",
				"category": "GitLens"
			},
			{
				"command": "gitlens.externalDiffAll",
				"title": "Open All Changes (difftool)",
				"category": "GitLens"
			},
			{
				"command": "gitlens.resetSuppressedWarnings",
				"title": "Reset Suppressed Warnings",
				"category": "GitLens"
			},
			{
				"command": "gitlens.inviteToLiveShare",
				"title": "Invite to Live Share",
				"category": "GitLens",
				"icon": "$(live-share)"
			},
			{
				"command": "gitlens.browseRepoAtRevision",
				"title": "Browse Repository from Revision",
				"category": "GitLens",
				"icon": "$(folder-opened)",
				"enablement": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != git"
			},
			{
				"command": "gitlens.browseRepoAtRevisionInNewWindow",
				"title": "Browse Repository from Revision in New Window",
				"category": "GitLens",
				"icon": "$(folder-opened)",
				"enablement": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != git"
			},
			{
				"command": "gitlens.browseRepoBeforeRevision",
				"title": "Browse Repository from Before Revision",
				"category": "GitLens",
				"icon": "$(folder-opened)",
				"enablement": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != git"
			},
			{
				"command": "gitlens.browseRepoBeforeRevisionInNewWindow",
				"title": "Browse Repository from Before Revision in New Window",
				"category": "GitLens",
				"icon": "$(folder-opened)",
				"enablement": "gitlens:activeFileStatus =~ /revision/ && resourceScheme != git"
			},
			{
				"command": "gitlens.views.browseRepoAtRevision",
				"title": "Repository from Here",
				"category": "GitLens",
				"icon": "$(folder-opened)"
			},
			{
				"command": "gitlens.views.browseRepoAtRevisionInNewWindow",
				"title": "Repository from Here in New Window",
				"category": "GitLens",
				"icon": "$(folder-opened)"
			},
			{
				"command": "gitlens.views.browseRepoBeforeRevision",
				"title": "Repository from Before Here",
				"category": "GitLens",
				"icon": "$(folder-opened)"
			},
			{
				"command": "gitlens.views.browseRepoBeforeRevisionInNewWindow",
				"title": "Repository from Before Here in New Window",
				"category": "GitLens",
				"icon": "$(folder-opened)"
			},
			{
				"command": "gitlens.fetchRepositories",
				"title": "Fetch",
				"category": "GitLens",
				"icon": "$(sync)"
			},
			{
				"command": "gitlens.pullRepositories",
				"title": "Pull",
				"category": "GitLens",
				"icon": "$(arrow-down)"
			},
			{
				"command": "gitlens.pushRepositories",
				"title": "Push",
				"category": "GitLens",
				"icon": "$(arrow-up)"
			},
			{
				"command": "gitlens.views.addRemote",
				"title": "Add Remote",
				"category": "GitLens",
				"icon": "$(add)"
			},
			{
				"command": "gitlens.views.highlightChanges",
				"title": "Highlight Changes",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.highlightRevisionChanges",
				"title": "Highlight Revision Changes",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.restore",
				"title": "Restore",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-checkout.svg",
					"light": "images/light/icon-checkout.svg"
				}
			},
			{
				"command": "gitlens.views.switchToAnotherBranch",
				"title": "Switch to Another Branch...",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-checkout.svg",
					"light": "images/light/icon-checkout.svg"
				}
			},
			{
				"command": "gitlens.views.switchToBranch",
				"title": "Switch to Branch...",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-checkout.svg",
					"light": "images/light/icon-checkout.svg"
				}
			},
			{
				"command": "gitlens.views.switchToCommit",
				"title": "Switch to Commit...",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-checkout.svg",
					"light": "images/light/icon-checkout.svg"
				}
			},
			{
				"command": "gitlens.views.switchToTag",
				"title": "Switch to Tag...",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-checkout.svg",
					"light": "images/light/icon-checkout.svg"
				}
			},
			{
				"command": "gitlens.views.copy",
				"title": "Copy",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-copy.svg",
					"light": "images/light/icon-copy.svg"
				}
			},
			{
				"command": "gitlens.views.pruneRemote",
				"title": "Prune",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.fetch",
				"title": "Fetch",
				"category": "GitLens",
				"icon": "$(sync)"
			},
			{
				"command": "gitlens.views.publishBranch",
				"title": "Publish Branch",
				"category": "GitLens",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "gitlens.views.pull",
				"title": "Pull",
				"category": "GitLens",
				"icon": "$(arrow-down)"
			},
			{
				"command": "gitlens.views.push",
				"title": "Push",
				"category": "GitLens",
				"icon": "$(arrow-up)"
			},
			{
				"command": "gitlens.views.pushWithForce",
				"title": "Push (force)",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-push-force.svg",
					"light": "images/light/icon-push-force.svg"
				}
			},
			{
				"command": "gitlens.views.openInTerminal",
				"title": "Open in Terminal",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.setAsDefault",
				"title": "Set as Default",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.unsetAsDefault",
				"title": "Unset as Default",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.stageDirectory",
				"title": "Stage All Changes",
				"category": "GitLens",
				"icon": "$(add)"
			},
			{
				"command": "gitlens.views.stageFile",
				"title": "Stage Changes",
				"category": "GitLens",
				"icon": "$(add)"
			},
			{
				"command": "gitlens.views.unstageDirectory",
				"title": "Unstage All Changes",
				"category": "GitLens",
				"icon": "$(remove)"
			},
			{
				"command": "gitlens.views.unstageFile",
				"title": "Unstage Changes",
				"category": "GitLens",
				"icon": "$(remove)"
			},
			{
				"command": "gitlens.views.star",
				"title": "Add to Favorites",
				"category": "GitLens",
				"icon": "$(star-empty)"
			},
			{
				"command": "gitlens.views.unstar",
				"title": "Remove from Favorites",
				"category": "GitLens",
				"icon": "$(star-full)"
			},
			{
				"command": "gitlens.views.openDirectoryDiff",
				"title": "Open Directory Compare",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.openDirectoryDiffWithWorking",
				"title": "Open Directory Compare with Working Tree",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.openChanges",
				"title": "Open Changes",
				"category": "GitLens",
				"icon": "$(compare-changes)"
			},
			{
				"command": "gitlens.views.openChangesWithWorking",
				"title": "Open Changes with Working File",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-compare-ref-working.svg",
					"light": "images/light/icon-compare-ref-working.svg"
				}
			},
			{
				"command": "gitlens.views.openFile",
				"title": "Open File",
				"category": "GitLens",
				"icon": "$(go-to-file)"
			},
			{
				"command": "gitlens.views.openFileRevision",
				"title": "Open File at Revision",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-open-revision.svg",
					"light": "images/light/icon-open-revision.svg"
				}
			},
			{
				"command": "gitlens.views.openChangedFiles",
				"title": "Open Files",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.openChangedFileDiffs",
				"title": "Open All Changes",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.openChangedFileDiffsWithWorking",
				"title": "Open All Changes with Working Tree",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.openChangedFileRevisions",
				"title": "Open Files at Revision",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.applyChanges",
				"title": "Apply Changes",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.closeRepository",
				"title": "Close Repository",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.compareAncestryWithWorking",
				"title": "Compare Ancestry with Working Tree",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.compareWithHead",
				"title": "Compare with HEAD",
				"category": "GitLens",
				"icon": "$(compare-changes)"
			},
			{
				"command": "gitlens.views.compareWithUpstream",
				"title": "Compare with Upstream",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-compare-ref-remote.svg",
					"light": "images/light/icon-compare-ref-remote.svg"
				}
			},
			{
				"command": "gitlens.views.compareWithSelected",
				"title": "Compare with Selected",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.selectForCompare",
				"title": "Select for Compare",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.compareFileWithSelected",
				"title": "Compare with Selected",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.selectFileForCompare",
				"title": "Select for Compare",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.compareWithWorking",
				"title": "Compare with Working Tree",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-compare-ref-working.svg",
					"light": "images/light/icon-compare-ref-working.svg"
				}
			},
			{
				"command": "gitlens.views.addAuthors",
				"title": "Add Co-authors",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-person-add.svg",
					"light": "images/light/icon-person-add.svg"
				}
			},
			{
				"command": "gitlens.views.addAuthor",
				"title": "Add as Co-author",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-person-add.svg",
					"light": "images/light/icon-person-add.svg"
				}
			},
			{
				"command": "gitlens.views.cherryPick",
				"title": "Cherry Pick Commit...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.createBranch",
				"title": "Create Branch...",
				"category": "GitLens",
				"icon": "$(add)"
			},
			{
				"command": "gitlens.views.deleteBranch",
				"title": "Delete Branch...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.renameBranch",
				"title": "Rename Branch...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.createTag",
				"title": "Create Tag...",
				"category": "GitLens",
				"icon": "$(add)"
			},
			{
				"command": "gitlens.views.deleteTag",
				"title": "Delete Tag...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.mergeBranchInto",
				"title": "Merge Branch into Current Branch...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.pushToCommit",
				"title": "Push to Commit...",
				"category": "GitLens",
				"icon": "$(arrow-up)"
			},
			{
				"command": "gitlens.views.rebaseOntoBranch",
				"title": "Rebase Current Branch onto Branch...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.rebaseOntoCommit",
				"title": "Rebase Current Branch onto Commit...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.rebaseOntoUpstream",
				"title": "Rebase Current Branch onto Upstream...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.resetCommit",
				"title": "Reset Current Branch to Previous Commit...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.resetToCommit",
				"title": "Reset Current Branch to Commit...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.revert",
				"title": "Revert Commit...",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.undoCommit",
				"title": "Undo Commit",
				"category": "GitLens",
				"icon": "$(discard)"
			},
			{
				"command": "gitlens.views.terminalRemoveRemote",
				"title": "Remove Remote (via Terminal)",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.setBranchComparisonToWorking",
				"title": "Toggle Compare with: Branch",
				"category": "GitLens",
				"icon": "$(compare-changes)"
			},
			{
				"command": "gitlens.views.setBranchComparisonToBranch",
				"title": "Toggle Compare with: Working Tree",
				"category": "GitLens",
				"icon": "$(compare-changes)"
			},
			{
				"command": "gitlens.views.createPullRequest",
				"title": "Create Pull Request...",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-create-pull-request.svg",
					"light": "images/light/icon-create-pull-request.svg"
				}
			},
			{
				"command": "gitlens.views.openPullRequest",
				"title": "Open Pull Request",
				"category": "GitLens",
				"icon": "$(git-pull-request)"
			},
			{
				"command": "gitlens.views.clearNode",
				"title": "Clear",
				"category": "GitLens",
				"icon": "$(close)"
			},
			{
				"command": "gitlens.views.dismissNode",
				"title": "Dismiss",
				"category": "GitLens",
				"icon": "$(close)"
			},
			{
				"command": "gitlens.views.expandNode",
				"title": "Expand",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.refreshNode",
				"title": "Refresh",
				"category": "GitLens",
				"icon": "$(refresh)"
			},
			{
				"command": "gitlens.views.loadMoreChildren",
				"title": "Load More",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.loadAllChildren",
				"title": "Load All",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-unfold.svg",
					"light": "images/light/icon-unfold.svg"
				}
			},
			{
				"command": "gitlens.views.setShowRelativeDateMarkersOn",
				"title": "Show Date Markers",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.setShowRelativeDateMarkersOff",
				"title": "Hide Date Markers",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.branches.copy",
				"title": "Copy",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.branches.refresh",
				"title": "Refresh",
				"category": "GitLens",
				"icon": "$(refresh)"
			},
			{
				"command": "gitlens.views.branches.setLayoutToList",
				"title": "Toggle View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.branches.setLayoutToTree",
				"title": "Toggle View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.branches.setFilesLayoutToAuto",
				"title": "Toggle Files View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.branches.setFilesLayoutToList",
				"title": "Toggle Files View: Auto",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-view-auto.svg",
					"light": "images/light/icon-view-auto.svg"
				}
			},
			{
				"command": "gitlens.views.branches.setFilesLayoutToTree",
				"title": "Toggle Files View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.branches.setShowAvatarsOn",
				"title": "Show Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.branches.setShowAvatarsOff",
				"title": "Hide Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.branches.setShowBranchComparisonOn",
				"title": "Show Branch Comparisons",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.branches.setShowBranchComparisonOff",
				"title": "Hide Branch Comparisons",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.branches.setShowBranchPullRequestOn",
				"title": "Show Branch Pull Requests",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.branches.setShowBranchPullRequestOff",
				"title": "Hide Branch Pull Requests",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.commits.copy",
				"title": "Copy",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.commits.refresh",
				"title": "Refresh",
				"category": "GitLens",
				"icon": "$(refresh)"
			},
			{
				"command": "gitlens.views.commits.setFilesLayoutToAuto",
				"title": "Toggle Files View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.commits.setFilesLayoutToList",
				"title": "Toggle Files View: Auto",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-view-auto.svg",
					"light": "images/light/icon-view-auto.svg"
				}
			},
			{
				"command": "gitlens.views.commits.setFilesLayoutToTree",
				"title": "Toggle Files View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.commits.setMyCommitsOnlyOn",
				"title": "Toggle Filter: All Commits",
				"category": "GitLens",
				"icon": "$(filter)"
			},
			{
				"command": "gitlens.views.commits.setMyCommitsOnlyOff",
				"title": "Toggle Filter: Only My Commits",
				"category": "GitLens",
				"icon": "$(filter)"
			},
			{
				"command": "gitlens.views.commits.setShowAvatarsOn",
				"title": "Show Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.commits.setShowAvatarsOff",
				"title": "Hide Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.commits.setShowBranchComparisonOn",
				"title": "Show Branch Comparison",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.commits.setShowBranchComparisonOff",
				"title": "Hide Branch Comparison",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.commits.setShowBranchPullRequestOn",
				"title": "Show Current Branch Pull Request",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.commits.setShowBranchPullRequestOff",
				"title": "Hide Current Branch Pull Request",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.contributors.copy",
				"title": "Copy",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.contributors.refresh",
				"title": "Refresh",
				"category": "GitLens",
				"icon": "$(refresh)"
			},
			{
				"command": "gitlens.views.contributors.setFilesLayoutToAuto",
				"title": "Toggle Files View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.contributors.setFilesLayoutToList",
				"title": "Toggle Files View: Auto",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-view-auto.svg",
					"light": "images/light/icon-view-auto.svg"
				}
			},
			{
				"command": "gitlens.views.contributors.setFilesLayoutToTree",
				"title": "Toggle Files View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.contributors.setShowAvatarsOn",
				"title": "Show Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.contributors.setShowAvatarsOff",
				"title": "Hide Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.fileHistory.changeBase",
				"title": "Change Base...",
				"category": "GitLens",
				"icon": "$(history)"
			},
			{
				"command": "gitlens.views.fileHistory.copy",
				"title": "Copy",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.fileHistory.refresh",
				"title": "Refresh",
				"category": "GitLens",
				"icon": "$(refresh)"
			},
			{
				"command": "gitlens.views.fileHistory.setCursorFollowingOn",
				"title": "Toggle History by: File",
				"category": "GitLens",
				"icon": "$(file)"
			},
			{
				"command": "gitlens.views.fileHistory.setCursorFollowingOff",
				"title": "Toggle History by: Selected Line(s)",
				"category": "GitLens",
				"icon": "$(list-selection)"
			},
			{
				"command": "gitlens.views.fileHistory.setEditorFollowingOn",
				"title": "Unpin the Current History",
				"category": "GitLens",
				"icon": "$(pinned)"
			},
			{
				"command": "gitlens.views.fileHistory.setEditorFollowingOff",
				"title": "Pin the Current History",
				"category": "GitLens",
				"icon": "$(pin)"
			},
			{
				"command": "gitlens.views.fileHistory.setRenameFollowingOn",
				"title": "Toggle Renames: Not Following",
				"category": "GitLens",
				"enablement": "!config.gitlens.advanced.fileHistoryShowAllBranches"
			},
			{
				"command": "gitlens.views.fileHistory.setRenameFollowingOff",
				"title": "Toggle Renames: Following",
				"category": "GitLens",
				"enablement": "!config.gitlens.advanced.fileHistoryShowAllBranches"
			},
			{
				"command": "gitlens.views.fileHistory.setShowAllBranchesOn",
				"title": "Toggle Filter: Only Current Branch",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.fileHistory.setShowAllBranchesOff",
				"title": "Toggle Filter: All Branches",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.fileHistory.setShowAvatarsOn",
				"title": "Show Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.fileHistory.setShowAvatarsOff",
				"title": "Hide Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.lineHistory.changeBase",
				"title": "Change Base...",
				"category": "GitLens",
				"icon": "$(history)"
			},
			{
				"command": "gitlens.views.lineHistory.copy",
				"title": "Copy",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.lineHistory.refresh",
				"title": "Refresh",
				"category": "GitLens",
				"icon": "$(refresh)"
			},
			{
				"command": "gitlens.views.lineHistory.setEditorFollowingOn",
				"title": "Unpin the Current History",
				"category": "GitLens",
				"icon": "$(pinned)"
			},
			{
				"command": "gitlens.views.lineHistory.setEditorFollowingOff",
				"title": "Pin the Current History",
				"category": "GitLens",
				"icon": "$(pin)"
			},
			{
				"command": "gitlens.views.lineHistory.setShowAvatarsOn",
				"title": "Show Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.lineHistory.setShowAvatarsOff",
				"title": "Hide Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.remotes.copy",
				"title": "Copy",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.remotes.refresh",
				"title": "Refresh",
				"category": "GitLens",
				"icon": "$(refresh)"
			},
			{
				"command": "gitlens.views.remotes.setLayoutToList",
				"title": "Toggle View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.remotes.setLayoutToTree",
				"title": "Toggle View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.remotes.setFilesLayoutToAuto",
				"title": "Toggle Files View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.remotes.setFilesLayoutToList",
				"title": "Toggle Files View: Auto",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-view-auto.svg",
					"light": "images/light/icon-view-auto.svg"
				}
			},
			{
				"command": "gitlens.views.remotes.setFilesLayoutToTree",
				"title": "Toggle Files View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.remotes.setShowAvatarsOn",
				"title": "Show Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.remotes.setShowAvatarsOff",
				"title": "Hide Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.remotes.setShowBranchPullRequestOn",
				"title": "Show Branch Pull Requests",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.remotes.setShowBranchPullRequestOff",
				"title": "Hide Branch Pull Requests",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.copy",
				"title": "Copy",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.refresh",
				"title": "Refresh",
				"category": "GitLens",
				"icon": "$(refresh)"
			},
			{
				"command": "gitlens.views.repositories.setAutoRefreshToOn",
				"title": "Enable Automatic Refresh",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setAutoRefreshToOff",
				"title": "Disable Automatic Refresh",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setBranchesLayoutToList",
				"title": "Toggle Branches View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.repositories.setBranchesLayoutToTree",
				"title": "Toggle Branches View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.repositories.setFilesLayoutToAuto",
				"title": "Toggle Files View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.repositories.setFilesLayoutToList",
				"title": "Toggle Files View: Auto",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-view-auto.svg",
					"light": "images/light/icon-view-auto.svg"
				}
			},
			{
				"command": "gitlens.views.repositories.setFilesLayoutToTree",
				"title": "Toggle Files View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.repositories.setShowAvatarsOn",
				"title": "Show Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowAvatarsOff",
				"title": "Hide Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowBranchComparisonOn",
				"title": "Show Branch Comparison",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowBranchComparisonOff",
				"title": "Hide Branch Comparison",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setBranchesShowBranchComparisonOn",
				"title": "Show Branch Comparisons",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
				"title": "Hide Branch Comparisons",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowBranchesOn",
				"title": "Show Branches",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowBranchesOff",
				"title": "Hide Branches",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowCommitsOn",
				"title": "Show Commits",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowCommitsOff",
				"title": "Hide Commits",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowContributorsOn",
				"title": "Show Contributors",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowContributorsOff",
				"title": "Hide Contributors",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowRemotesOn",
				"title": "Show Remotes",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowRemotesOff",
				"title": "Hide Remotes",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowStashesOn",
				"title": "Show Stashes",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowStashesOff",
				"title": "Hide Stashes",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowTagsOn",
				"title": "Show Tags",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowTagsOff",
				"title": "Hide Tags",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowUpstreamStatusOn",
				"title": "Show Current Branch Status",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowUpstreamStatusOff",
				"title": "Hide Current Branch Status",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.repositories.setShowSectionOff",
				"title": "Hide",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.searchAndCompare.clear",
				"title": "Clear Results",
				"category": "GitLens",
				"icon": "$(clear-all)"
			},
			{
				"command": "gitlens.views.searchAndCompare.copy",
				"title": "Copy",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.searchAndCompare.pin",
				"title": "Pin",
				"category": "GitLens",
				"icon": "$(pin)"
			},
			{
				"command": "gitlens.views.searchAndCompare.unpin",
				"title": "Unpin",
				"category": "GitLens",
				"icon": "$(pinned)"
			},
			{
				"command": "gitlens.views.searchAndCompare.refresh",
				"title": "Refresh",
				"category": "GitLens",
				"icon": "$(refresh)"
			},
			{
				"command": "gitlens.views.searchAndCompare.searchCommits",
				"title": "Search Commits...",
				"category": "GitLens",
				"icon": "$(search)"
			},
			{
				"command": "gitlens.views.searchAndCompare.edit",
				"title": "Edit...",
				"category": "GitLens",
				"icon": "$(edit)"
			},
			{
				"command": "gitlens.views.searchAndCompare.selectForCompare",
				"title": "Compare References...",
				"category": "GitLens",
				"icon": "$(compare-changes)"
			},
			{
				"command": "gitlens.views.searchAndCompare.setFilesLayoutToAuto",
				"title": "Toggle Files View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.searchAndCompare.setFilesLayoutToList",
				"title": "Toggle Files View: Auto",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-view-auto.svg",
					"light": "images/light/icon-view-auto.svg"
				}
			},
			{
				"command": "gitlens.views.searchAndCompare.setFilesLayoutToTree",
				"title": "Toggle Files View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.searchAndCompare.setKeepResultsToOn",
				"title": "Keep Results",
				"category": "GitLens",
				"icon": "$(unlock)"
			},
			{
				"command": "gitlens.views.searchAndCompare.setKeepResultsToOff",
				"title": "Keep Results",
				"category": "GitLens",
				"icon": "$(lock)"
			},
			{
				"command": "gitlens.views.searchAndCompare.setShowAvatarsOn",
				"title": "Show Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.searchAndCompare.setShowAvatarsOff",
				"title": "Hide Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.searchAndCompare.swapComparison",
				"title": "Swap Comparison",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-swap.svg",
					"light": "images/light/icon-swap.svg"
				}
			},
			{
				"command": "gitlens.views.stashes.copy",
				"title": "Copy",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.stashes.refresh",
				"title": "Refresh",
				"category": "GitLens",
				"icon": "$(refresh)"
			},
			{
				"command": "gitlens.views.stashes.setFilesLayoutToAuto",
				"title": "Toggle Files View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.stashes.setFilesLayoutToList",
				"title": "Toggle Files View: Auto",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-view-auto.svg",
					"light": "images/light/icon-view-auto.svg"
				}
			},
			{
				"command": "gitlens.views.stashes.setFilesLayoutToTree",
				"title": "Toggle Files View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.tags.copy",
				"title": "Copy",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.tags.refresh",
				"title": "Refresh",
				"category": "GitLens",
				"icon": "$(refresh)"
			},
			{
				"command": "gitlens.views.tags.setLayoutToList",
				"title": "Toggle View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.tags.setLayoutToTree",
				"title": "Toggle View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.tags.setFilesLayoutToAuto",
				"title": "Toggle Files View: Tree",
				"category": "GitLens",
				"icon": "$(list-tree)"
			},
			{
				"command": "gitlens.views.tags.setFilesLayoutToList",
				"title": "Toggle Files View: Auto",
				"category": "GitLens",
				"icon": {
					"dark": "images/dark/icon-view-auto.svg",
					"light": "images/light/icon-view-auto.svg"
				}
			},
			{
				"command": "gitlens.views.tags.setFilesLayoutToTree",
				"title": "Toggle Files View: List",
				"category": "GitLens",
				"icon": "$(list-flat)"
			},
			{
				"command": "gitlens.views.tags.setShowAvatarsOn",
				"title": "Show Avatars",
				"category": "GitLens"
			},
			{
				"command": "gitlens.views.tags.setShowAvatarsOff",
				"title": "Hide Avatars",
				"category": "GitLens"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "gitlens.showSettingsPage#views",
					"when": "false"
				},
				{
					"command": "gitlens.showSettingsPage#branches-view",
					"when": "false"
				},
				{
					"command": "gitlens.showSettingsPage#commits-view",
					"when": "false"
				},
				{
					"command": "gitlens.showSettingsPage#contributors-view",
					"when": "false"
				},
				{
					"command": "gitlens.showSettingsPage#file-history-view",
					"when": "false"
				},
				{
					"command": "gitlens.showSettingsPage#line-history-view",
					"when": "false"
				},
				{
					"command": "gitlens.showSettingsPage#remotes-view",
					"when": "false"
				},
				{
					"command": "gitlens.showSettingsPage#repositories-view",
					"when": "false"
				},
				{
					"command": "gitlens.showSettingsPage#search-compare-view",
					"when": "false"
				},
				{
					"command": "gitlens.showSettingsPage#stashes-view",
					"when": "false"
				},
				{
					"command": "gitlens.showSettingsPage#tags-view",
					"when": "false"
				},
				{
					"command": "gitlens.showBranchesView",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showCommitsView",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showContributorsView",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showFileHistoryView",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showLineHistoryView",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showRemotesView",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showRepositoriesView",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showSearchAndCompareView",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showStashesView",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showTagsView",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showWelcomeView",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.closeUpdatesView",
					"when": "false"
				},
				{
					"command": "gitlens.closeWelcomeView",
					"when": "false"
				},
				{
					"command": "gitlens.compareWith",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.compareHeadWith",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.compareWorkingWith",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.diffDirectory",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.diffDirectoryWithHead",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.diffWithRevisionFrom",
					"when": "gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.diffWithNext",
					"when": "gitlens:activeFileStatus =~ /revision/ && !isInDiffEditor"
				},
				{
					"command": "gitlens.diffWithNextInDiffLeft",
					"when": "gitlens:activeFileStatus =~ /revision/ && isInDiffEditor && !isInDiffRightEditor"
				},
				{
					"command": "gitlens.diffWithNextInDiffRight",
					"when": "gitlens:activeFileStatus =~ /revision/ && isInDiffRightEditor"
				},
				{
					"command": "gitlens.diffWithPrevious",
					"when": "gitlens:activeFileStatus =~ /tracked/ && !isInDiffEditor"
				},
				{
					"command": "gitlens.diffWithPreviousInDiffLeft",
					"when": "gitlens:activeFileStatus =~ /tracked/ && isInDiffEditor && !isInDiffRightEditor"
				},
				{
					"command": "gitlens.diffWithPreviousInDiffRight",
					"when": "gitlens:activeFileStatus =~ /tracked/ && isInDiffRightEditor"
				},
				{
					"command": "gitlens.diffLineWithPrevious",
					"when": "gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.diffWithRevision",
					"when": "gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.diffWithWorking",
					"when": "gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.diffWithWorkingInDiffLeft",
					"when": "false"
				},
				{
					"command": "gitlens.diffWithWorkingInDiffRight",
					"when": "false"
				},
				{
					"command": "gitlens.diffLineWithWorking",
					"when": "gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.disableRebaseEditor",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.enableRebaseEditor",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.externalDiff",
					"when": "gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.externalDiffAll",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.toggleFileBlame",
					"when": "gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.toggleFileBlameInDiffLeft",
					"when": "false"
				},
				{
					"command": "gitlens.toggleFileBlameInDiffRight",
					"when": "false"
				},
				{
					"command": "gitlens.clearFileAnnotations",
					"when": "gitlens:activeFileStatus =~ /blameable/ && gitlens:annotationStatus == computed"
				},
				{
					"command": "gitlens.computingFileAnnotations",
					"when": "false"
				},
				{
					"command": "gitlens.toggleFileHeatmap",
					"when": "gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.toggleFileHeatmapInDiffLeft",
					"when": "false"
				},
				{
					"command": "gitlens.toggleFileHeatmapInDiffRight",
					"when": "false"
				},
				{
					"command": "gitlens.toggleFileChanges",
					"when": "gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.toggleLineBlame",
					"when": "!gitlens:disabled"
				},
				{
					"command": "gitlens.toggleCodeLens",
					"when": "!gitlens:disabled && !gitlens:disabledToggleCodeLens"
				},
				{
					"command": "gitlens.gitCommands",
					"when": "!gitlens:disabled && !gitlens:readonly"
				},
				{
					"command": "gitlens.switchMode",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.toggleReviewMode",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.toggleZenMode",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showCommitSearch",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showLastQuickPick",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.revealCommitInView",
					"when": "gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.showCommitInView",
					"when": "gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.showCommitsInView",
					"when": "gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.showFileHistoryInView",
					"when": "gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.showQuickCommitDetails",
					"when": "false"
				},
				{
					"command": "gitlens.showQuickCommitFileDetails",
					"when": "gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.showQuickRevisionDetails",
					"when": "gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.showQuickRevisionDetailsInDiffLeft",
					"when": "false"
				},
				{
					"command": "gitlens.showQuickRevisionDetailsInDiffRight",
					"when": "false"
				},
				{
					"command": "gitlens.showQuickFileHistory",
					"when": "gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.quickOpenFileHistory",
					"when": "gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.showQuickBranchHistory",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showQuickRepoHistory",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showQuickRepoStatus",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.showQuickStashList",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.addAuthors",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.connectRemoteProvider",
					"when": "config.gitlens.integrations.enabled && gitlens:hasRichRemotes && !gitlens:hasConnectedRemotes"
				},
				{
					"command": "gitlens.disconnectRemoteProvider",
					"when": "config.gitlens.integrations.enabled && gitlens:hasRichRemotes && gitlens:hasConnectedRemotes"
				},
				{
					"command": "gitlens.resetRemoteConnectionAuthorization",
					"when": "config.gitlens.integrations.enabled && gitlens:hasRichRemotes"
				},
				{
					"command": "gitlens.copyCurrentBranch",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.copyMessageToClipboard",
					"when": "gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.copyShaToClipboard",
					"when": "gitlens:activeFileStatus =~ /blameable/"
				},
				{
					"command": "gitlens.closeUnchangedFiles",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.openChangedFiles",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.openBranchesOnRemote",
					"when": "gitlens:hasRemotes"
				},
				{
					"command": "gitlens.copyRemoteBranchesUrl",
					"when": "false"
				},
				{
					"command": "gitlens.openBranchOnRemote",
					"when": "gitlens:hasRemotes"
				},
				{
					"command": "gitlens.copyRemoteBranchUrl",
					"when": "false"
				},
				{
					"command": "gitlens.openCommitOnRemote",
					"when": "gitlens:activeFileStatus =~ /blameable/ && gitlens:activeFileStatus =~ /remotes/"
				},
				{
					"command": "gitlens.copyRemoteCommitUrl",
					"when": "gitlens:activeFileStatus =~ /tracked/ && gitlens:activeFileStatus =~ /remotes/"
				},
				{
					"command": "gitlens.openComparisonOnRemote",
					"when": "false"
				},
				{
					"command": "gitlens.copyRemoteComparisonUrl",
					"when": "false"
				},
				{
					"command": "gitlens.openPullRequestOnRemote",
					"when": "false"
				},
				{
					"command": "gitlens.copyRemotePullRequestUrl",
					"when": "false"
				},
				{
					"command": "gitlens.openAssociatedPullRequestOnRemote",
					"when": "gitlens:activeFileStatus =~ /blameable/ && gitlens:activeFileStatus =~ /remotes/"
				},
				{
					"command": "gitlens.openFileFromRemote",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.openFileOnRemote",
					"when": "gitlens:activeFileStatus =~ /tracked/ && gitlens:activeFileStatus =~ /remotes/"
				},
				{
					"command": "gitlens.copyRemoteFileUrlToClipboard",
					"when": "gitlens:activeFileStatus =~ /tracked/ && gitlens:activeFileStatus =~ /remotes/"
				},
				{
					"command": "gitlens.openFileOnRemoteFrom",
					"when": "gitlens:activeFileStatus =~ /tracked/ && gitlens:activeFileStatus =~ /remotes/"
				},
				{
					"command": "gitlens.copyRemoteFileUrlFrom",
					"when": "gitlens:activeFileStatus =~ /tracked/ && gitlens:activeFileStatus =~ /remotes/"
				},
				{
					"command": "gitlens.openFileRevision",
					"when": "gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.openFileRevisionFrom",
					"when": "gitlens:activeFileStatus =~ /tracked/"
				},
				{
					"command": "gitlens.openRepoOnRemote",
					"when": "gitlens:hasRemotes"
				},
				{
					"command": "gitlens.copyRemoteRepositoryUrl",
					"when": "false"
				},
				{
					"command": "gitlens.openRevisionFile",
					"when": "gitlens:activeFileStatus =~ /revision/ && isInDiffEditor"
				},
				{
					"command": "gitlens.openRevisionFileInDiffLeft",
					"when": "false"
				},
				{
					"command": "gitlens.openRevisionFileInDiffRight",
					"when": "false"
				},
				{
					"command": "gitlens.openWorkingFile",
					"when": "gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.openWorkingFileInDiffLeft",
					"when": "false"
				},
				{
					"command": "gitlens.openWorkingFileInDiffRight",
					"when": "false"
				},
				{
					"command": "gitlens.stashApply",
					"when": "gitlens:enabled && !gitlens:readonly"
				},
				{
					"command": "gitlens.views.deleteStash",
					"when": "false"
				},
				{
					"command": "gitlens.stashSave",
					"when": "gitlens:enabled && !gitlens:readonly"
				},
				{
					"command": "gitlens.stashSaveFiles",
					"when": "false"
				},
				{
					"command": "gitlens.resetSuppressedWarnings",
					"when": "gitlens:enabled"
				},
				{
					"command": "gitlens.inviteToLiveShare",
					"when": "false"
				},
				{
					"command": "gitlens.browseRepoAtRevision",
					"when": "gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.browseRepoAtRevisionInNewWindow",
					"when": "gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.browseRepoBeforeRevision",
					"when": "gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.browseRepoBeforeRevisionInNewWindow",
					"when": "gitlens:activeFileStatus =~ /revision/"
				},
				{
					"command": "gitlens.views.browseRepoAtRevision",
					"when": "false"
				},
				{
					"command": "gitlens.views.browseRepoAtRevisionInNewWindow",
					"when": "false"
				},
				{
					"command": "gitlens.views.browseRepoBeforeRevision",
					"when": "false"
				},
				{
					"command": "gitlens.views.browseRepoBeforeRevisionInNewWindow",
					"when": "false"
				},
				{
					"command": "gitlens.fetchRepositories",
					"when": "gitlens:hasRemotes && !gitlens:readonly"
				},
				{
					"command": "gitlens.pullRepositories",
					"when": "gitlens:hasRemotes && !gitlens:readonly"
				},
				{
					"command": "gitlens.pushRepositories",
					"when": "gitlens:hasRemotes && !gitlens:readonly"
				},
				{
					"command": "gitlens.views.addRemote",
					"when": "false"
				},
				{
					"command": "gitlens.views.highlightChanges",
					"when": "false"
				},
				{
					"command": "gitlens.views.highlightRevisionChanges",
					"when": "false"
				},
				{
					"command": "gitlens.views.restore",
					"when": "false"
				},
				{
					"command": "gitlens.views.switchToAnotherBranch",
					"when": "false"
				},
				{
					"command": "gitlens.views.switchToBranch",
					"when": "false"
				},
				{
					"command": "gitlens.views.switchToCommit",
					"when": "false"
				},
				{
					"command": "gitlens.views.switchToTag",
					"when": "false"
				},
				{
					"command": "gitlens.views.copy",
					"when": "false"
				},
				{
					"command": "gitlens.views.pruneRemote",
					"when": "false"
				},
				{
					"command": "gitlens.views.fetch",
					"when": "false"
				},
				{
					"command": "gitlens.views.publishBranch",
					"when": "false"
				},
				{
					"command": "gitlens.views.pull",
					"when": "false"
				},
				{
					"command": "gitlens.views.push",
					"when": "false"
				},
				{
					"command": "gitlens.views.pushWithForce",
					"when": "false"
				},
				{
					"command": "gitlens.views.openInTerminal",
					"when": "false"
				},
				{
					"command": "gitlens.views.setAsDefault",
					"when": "false"
				},
				{
					"command": "gitlens.views.unsetAsDefault",
					"when": "false"
				},
				{
					"command": "gitlens.views.stageDirectory",
					"when": "false"
				},
				{
					"command": "gitlens.views.stageFile",
					"when": "false"
				},
				{
					"command": "gitlens.views.unstageDirectory",
					"when": "false"
				},
				{
					"command": "gitlens.views.unstageFile",
					"when": "false"
				},
				{
					"command": "gitlens.views.star",
					"when": "false"
				},
				{
					"command": "gitlens.views.unstar",
					"when": "false"
				},
				{
					"command": "gitlens.views.openChanges",
					"when": "false"
				},
				{
					"command": "gitlens.views.openDirectoryDiff",
					"when": "false"
				},
				{
					"command": "gitlens.views.openDirectoryDiffWithWorking",
					"when": "false"
				},
				{
					"command": "gitlens.views.openChangesWithWorking",
					"when": "false"
				},
				{
					"command": "gitlens.views.openFile",
					"when": "false"
				},
				{
					"command": "gitlens.views.openFileRevision",
					"when": "false"
				},
				{
					"command": "gitlens.views.openChangedFiles",
					"when": "false"
				},
				{
					"command": "gitlens.views.openChangedFileDiffs",
					"when": "false"
				},
				{
					"command": "gitlens.views.openChangedFileDiffsWithWorking",
					"when": "false"
				},
				{
					"command": "gitlens.views.openChangedFileRevisions",
					"when": "false"
				},
				{
					"command": "gitlens.views.applyChanges",
					"when": "false"
				},
				{
					"command": "gitlens.views.closeRepository",
					"when": "false"
				},
				{
					"command": "gitlens.views.compareAncestryWithWorking",
					"when": "false"
				},
				{
					"command": "gitlens.views.compareWithHead",
					"when": "false"
				},
				{
					"command": "gitlens.views.compareWithUpstream",
					"when": "false"
				},
				{
					"command": "gitlens.views.compareWithSelected",
					"when": "false"
				},
				{
					"command": "gitlens.views.selectForCompare",
					"when": "false"
				},
				{
					"command": "gitlens.views.compareFileWithSelected",
					"when": "false"
				},
				{
					"command": "gitlens.views.selectFileForCompare",
					"when": "false"
				},
				{
					"command": "gitlens.views.compareWithWorking",
					"when": "false"
				},
				{
					"command": "gitlens.views.addAuthors",
					"when": "false"
				},
				{
					"command": "gitlens.views.addAuthor",
					"when": "false"
				},
				{
					"command": "gitlens.views.createBranch",
					"when": "false"
				},
				{
					"command": "gitlens.views.deleteBranch",
					"when": "false"
				},
				{
					"command": "gitlens.views.renameBranch",
					"when": "false"
				},
				{
					"command": "gitlens.views.cherryPick",
					"when": "false"
				},
				{
					"command": "gitlens.views.mergeBranchInto",
					"when": "false"
				},
				{
					"command": "gitlens.views.pushToCommit",
					"when": "false"
				},
				{
					"command": "gitlens.views.rebaseOntoBranch",
					"when": "false"
				},
				{
					"command": "gitlens.views.rebaseOntoCommit",
					"when": "false"
				},
				{
					"command": "gitlens.views.rebaseOntoUpstream",
					"when": "false"
				},
				{
					"command": "gitlens.views.resetCommit",
					"when": "false"
				},
				{
					"command": "gitlens.views.resetToCommit",
					"when": "false"
				},
				{
					"command": "gitlens.views.revert",
					"when": "false"
				},
				{
					"command": "gitlens.views.undoCommit",
					"when": "false"
				},
				{
					"command": "gitlens.views.terminalRemoveRemote",
					"when": "false"
				},
				{
					"command": "gitlens.views.createTag",
					"when": "false"
				},
				{
					"command": "gitlens.views.deleteTag",
					"when": "false"
				},
				{
					"command": "gitlens.views.setBranchComparisonToWorking",
					"when": "false"
				},
				{
					"command": "gitlens.views.setBranchComparisonToBranch",
					"when": "false"
				},
				{
					"command": "gitlens.views.createPullRequest",
					"when": "false"
				},
				{
					"command": "gitlens.views.openPullRequest",
					"when": "false"
				},
				{
					"command": "gitlens.views.clearNode",
					"when": "false"
				},
				{
					"command": "gitlens.views.dismissNode",
					"when": "false"
				},
				{
					"command": "gitlens.views.expandNode",
					"when": "false"
				},
				{
					"command": "gitlens.views.refreshNode",
					"when": "false"
				},
				{
					"command": "gitlens.views.loadMoreChildren",
					"when": "false"
				},
				{
					"command": "gitlens.views.loadAllChildren",
					"when": "false"
				},
				{
					"command": "gitlens.views.setShowRelativeDateMarkersOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.setShowRelativeDateMarkersOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.copy",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.refresh",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.setLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.setLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.setFilesLayoutToAuto",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.setFilesLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.setFilesLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.setShowAvatarsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.setShowAvatarsOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.setShowBranchComparisonOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.setShowBranchComparisonOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.setShowBranchPullRequestOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.branches.setShowBranchPullRequestOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.copy",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.refresh",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.setFilesLayoutToAuto",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.setFilesLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.setFilesLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.setMyCommitsOnlyOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.setMyCommitsOnlyOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.setShowAvatarsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.setShowAvatarsOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.setShowBranchComparisonOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.setShowBranchComparisonOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.setShowBranchPullRequestOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.commits.setShowBranchPullRequestOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.contributors.copy",
					"when": "false"
				},
				{
					"command": "gitlens.views.contributors.refresh",
					"when": "false"
				},
				{
					"command": "gitlens.views.contributors.setFilesLayoutToAuto",
					"when": "false"
				},
				{
					"command": "gitlens.views.contributors.setFilesLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.contributors.setFilesLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.contributors.setShowAvatarsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.contributors.setShowAvatarsOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.changeBase",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.copy",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.refresh",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.setCursorFollowingOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.setCursorFollowingOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.setEditorFollowingOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.setEditorFollowingOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.setRenameFollowingOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.setRenameFollowingOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.setShowAllBranchesOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.setShowAllBranchesOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.setShowAvatarsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.fileHistory.setShowAvatarsOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.lineHistory.changeBase",
					"when": "false"
				},
				{
					"command": "gitlens.views.lineHistory.copy",
					"when": "false"
				},
				{
					"command": "gitlens.views.lineHistory.refresh",
					"when": "false"
				},
				{
					"command": "gitlens.views.lineHistory.setEditorFollowingOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.lineHistory.setEditorFollowingOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.lineHistory.setShowAvatarsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.lineHistory.setShowAvatarsOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.remotes.copy",
					"when": "false"
				},
				{
					"command": "gitlens.views.remotes.refresh",
					"when": "false"
				},
				{
					"command": "gitlens.views.remotes.setLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.remotes.setLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.remotes.setFilesLayoutToAuto",
					"when": "false"
				},
				{
					"command": "gitlens.views.remotes.setFilesLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.remotes.setFilesLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.remotes.setShowAvatarsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.remotes.setShowAvatarsOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.remotes.setShowBranchPullRequestOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.remotes.setShowBranchPullRequestOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.copy",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.refresh",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setAutoRefreshToOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setAutoRefreshToOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setBranchesLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setBranchesLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setFilesLayoutToAuto",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setFilesLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setFilesLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowAvatarsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowAvatarsOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowBranchComparisonOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowBranchComparisonOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setBranchesShowBranchComparisonOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowBranchesOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowBranchesOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowCommitsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowCommitsOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowContributorsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowContributorsOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowRemotesOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowRemotesOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowStashesOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowStashesOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowTagsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowTagsOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowUpstreamStatusOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowUpstreamStatusOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.repositories.setShowSectionOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.clear",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.copy",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.pin",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.unpin",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.refresh",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.searchCommits",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.edit",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.selectForCompare",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.setFilesLayoutToAuto",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.setFilesLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.setFilesLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.setKeepResultsToOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.setKeepResultsToOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.setShowAvatarsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.setShowAvatarsOff",
					"when": "false"
				},
				{
					"command": "gitlens.views.searchAndCompare.swapComparison",
					"when": "false"
				},
				{
					"command": "gitlens.views.stashes.copy",
					"when": "false"
				},
				{
					"command": "gitlens.views.stashes.refresh",
					"when": "false"
				},
				{
					"command": "gitlens.views.stashes.setFilesLayoutToAuto",
					"when": "false"
				},
				{
					"command": "gitlens.views.stashes.setFilesLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.stashes.setFilesLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.tags.copy",
					"when": "false"
				},
				{
					"command": "gitlens.views.tags.refresh",
					"when": "false"
				},
				{
					"command": "gitlens.views.tags.setLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.tags.setLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.tags.setFilesLayoutToAuto",
					"when": "false"
				},
				{
					"command": "gitlens.views.tags.setFilesLayoutToList",
					"when": "false"
				},
				{
					"command": "gitlens.views.tags.setFilesLayoutToTree",
					"when": "false"
				},
				{
					"command": "gitlens.views.tags.setShowAvatarsOn",
					"when": "false"
				},
				{
					"command": "gitlens.views.tags.setShowAvatarsOff",
					"when": "false"
				}
			],
			"editor/context": [
				{
					"submenu": "gitlens/editor/context/openChanges",
					"when": "editorTextFocus && config.gitlens.menus.editor.compare",
					"group": "2_gitlens@1"
				},
				{
					"command": "gitlens.openCommitOnRemote",
					"when": "editorTextFocus && gitlens:activeFileStatus =~ /remotes/ && config.gitlens.menus.editor.remote",
					"group": "2_gitlens@2",
					"alt": "gitlens.copyRemoteCommitUrl"
				},
				{
					"command": "gitlens.openFileOnRemote",
					"when": "editorTextFocus && gitlens:activeFileStatus =~ /remotes/ && config.gitlens.menus.editor.remote",
					"group": "2_gitlens@3",
					"alt": "gitlens.copyRemoteFileUrlToClipboard"
				},
				{
					"command": "gitlens.openFileOnRemoteFrom",
					"when": "editorTextFocus && gitlens:activeFileStatus =~ /remotes/ && config.gitlens.menus.editor.remote",
					"group": "2_gitlens@4",
					"alt": "gitlens.copyRemoteFileUrlFrom"
				},
				{
					"command": "gitlens.showFileHistoryInView",
					"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editor.history",
					"group": "2_gitlens@5"
				},
				{
					"command": "gitlens.quickOpenFileHistory",
					"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editor.history",
					"group": "2_gitlens@6"
				},
				{
					"submenu": "gitlens/editor/annotations",
					"when": "editorTextFocus && gitlens:activeFileStatus =~ /blameable/ && config.gitlens.menus.editor.blame",
					"group": "2_gitlens_1@5"
				},
				{
					"submenu": "gitlens/editor/context/copy",
					"when": "editorTextFocus && gitlens:activeFileStatus =~ /blameable/ && config.gitlens.menus.editor.clipboard",
					"group": "9_cutcopypaste@3"
				}
			],
			"editor/title": [
				{
					"command": "gitlens.diffWithWorking",
					"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme =~ /^(?!(file|git)$).*$/ && !isInDiffEditor",
					"group": "navigation@-99"
				},
				{
					"command": "gitlens.diffWithWorkingInDiffLeft",
					"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme =~ /^(?!(file|git)$).*$/ && isInDiffEditor && !isInDiffRightEditor",
					"group": "navigation@-99"
				},
				{
					"command": "gitlens.diffWithWorkingInDiffRight",
					"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme =~ /^(?!(file|git)$).*$/ && isInDiffRightEditor",
					"group": "navigation@-99"
				},
				{
					"command": "gitlens.openWorkingFile",
					"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme == git && !isInDiffEditor",
					"group": "navigation@-98"
				},
				{
					"command": "gitlens.openWorkingFile",
					"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme =~ /^(?!(file|git)$).*$/ && !isInDiffEditor",
					"group": "navigation@-98"
				},
				{
					"command": "gitlens.openWorkingFileInDiffLeft",
					"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme =~ /^(?!(file|git)$).*$/ && isInDiffEditor && !isInDiffRightEditor",
					"group": "navigation@-98"
				},
				{
					"command": "gitlens.openWorkingFileInDiffRight",
					"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme =~ /^(?!(file|git)$).*$/ && isInDiffRightEditor",
					"group": "navigation@-98"
				},
				{
					"command": "gitlens.openRevisionFileInDiffLeft",
					"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme =~ /^(?!(file|git)$).*$/ && isInDiffEditor && !isInDiffRightEditor",
					"group": "navigation@-97"
				},
				{
					"command": "gitlens.openRevisionFileInDiffRight",
					"when": "gitlens:activeFileStatus =~ /revision/ && resourceScheme =~ /^(?!(file|git)$).*$/ && isInDiffRightEditor",
					"group": "navigation@-97"
				},
				{
					"command": "gitlens.diffWithPrevious",
					"alt": "gitlens.diffWithRevision",
					"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editorGroup.compare && !isInDiffEditor",
					"group": "navigation@97"
				},
				{
					"command": "gitlens.diffWithPreviousInDiffLeft",
					"alt": "gitlens.diffWithRevision",
					"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editorGroup.compare && isInDiffEditor && !isInDiffRightEditor",
					"group": "navigation@97"
				},
				{
					"command": "gitlens.diffWithPreviousInDiffRight",
					"alt": "gitlens.diffWithRevision",
					"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editorGroup.compare && isInDiffRightEditor",
					"group": "navigation@97"
				},
				{
					"command": "gitlens.showQuickRevisionDetails",
					"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editorGroup.compare && !isInDiffEditor",
					"group": "navigation@98"
				},
				{
					"command": "gitlens.showQuickRevisionDetailsInDiffLeft",
					"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editorGroup.compare && isInDiffEditor && !isInDiffRightEditor",
					"group": "navigation@98"
				},
				{
					"command": "gitlens.showQuickRevisionDetailsInDiffRight",
					"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editorGroup.compare && isInDiffRightEditor",
					"group": "navigation@98"
				},
				{
					"command": "gitlens.diffWithNext",
					"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editorGroup.compare && !isInDiffEditor",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.diffWithNextInDiffLeft",
					"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editorGroup.compare && isInDiffEditor && !isInDiffRightEditor",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.diffWithNextInDiffRight",
					"when": "gitlens:activeFileStatus =~ /tracked/ && config.gitlens.menus.editorGroup.compare && isInDiffRightEditor",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.toggleFileBlame",
					"when": "config.gitlens.fileAnnotations.command == blame && gitlens:activeFileStatus =~ /blameable/ && !gitlens:annotationStatus && config.gitlens.menus.editorGroup.blame",
					"group": "navigation@100",
					"alt": "gitlens.toggleFileHeatmap"
				},
				{
					"command": "gitlens.toggleFileHeatmap",
					"when": "config.gitlens.fileAnnotations.command == heatmap && gitlens:activeFileStatus =~ /blameable/ && !gitlens:annotationStatus && config.gitlens.menus.editorGroup.blame",
					"group": "navigation@100",
					"alt": "gitlens.toggleFileBlame"
				},
				{
					"command": "gitlens.toggleFileChanges",
					"when": "config.gitlens.fileAnnotations.command == changes && gitlens:activeFileStatus =~ /blameable/ && !gitlens:annotationStatus && config.gitlens.menus.editorGroup.blame",
					"group": "navigation@100",
					"alt": "gitlens.toggleFileBlame"
				},
				{
					"submenu": "gitlens/editor/annotations",
					"when": "!config.gitlens.fileAnnotations.command && gitlens:activeFileStatus =~ /blameable/ && !gitlens:annotationStatus && config.gitlens.menus.editorGroup.blame",
					"group": "navigation@100"
				},
				{
					"command": "gitlens.computingFileAnnotations",
					"when": "gitlens:activeFileStatus =~ /blameable/ && gitlens:annotationStatus == computing && config.gitlens.menus.editorGroup.blame",
					"group": "navigation@100"
				},
				{
					"command": "gitlens.clearFileAnnotations",
					"when": "gitlens:activeFileStatus =~ /blameable/ && gitlens:annotationStatus == computed && config.gitlens.menus.editorGroup.blame",
					"group": "navigation@100"
				}
			],
			"editor/title/context": [
				{
					"command": "gitlens.copyRemoteFileUrlToClipboard",
					"when": "gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.editorTab.clipboard",
					"group": "1_cutcopypaste@100"
				},
				{
					"submenu": "gitlens/editor/openChanges",
					"when": "gitlens:enabled && config.gitlens.menus.editorTab.compare",
					"group": "2_gitlens@0"
				},
				{
					"command": "gitlens.openWorkingFile",
					"when": "resourceScheme == gitlens",
					"group": "2_gitlens@1"
				},
				{
					"command": "gitlens.openFileOnRemote",
					"when": "gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.editorTab.remote",
					"group": "2_gitlens@2",
					"alt": "gitlens.copyRemoteFileUrlToClipboard"
				},
				{
					"command": "gitlens.openFileOnRemoteFrom",
					"when": "gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.editorTab.remote",
					"group": "2_gitlens@3",
					"alt": "gitlens.copyRemoteFileUrlFrom"
				},
				{
					"command": "gitlens.showFileHistoryInView",
					"when": "gitlens:enabled && config.gitlens.menus.editorTab.history",
					"group": "2_gitlens@4"
				},
				{
					"command": "gitlens.quickOpenFileHistory",
					"when": "gitlens:enabled && config.gitlens.menus.editorTab.history",
					"group": "2_gitlens@5"
				}
			],
			"explorer/context": [
				{
					"submenu": "gitlens/explorer/openChanges",
					"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && config.gitlens.menus.explorer.compare",
					"group": "4_gitlens@0"
				},
				{
					"command": "gitlens.openFileOnRemote",
					"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.explorer.remote",
					"group": "4_gitlens@1",
					"alt": "gitlens.copyRemoteFileUrlToClipboard"
				},
				{
					"command": "gitlens.openFileOnRemoteFrom",
					"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.explorer.remote",
					"group": "4_gitlens@2",
					"alt": "gitlens.copyRemoteFileUrlFrom"
				},
				{
					"command": "gitlens.showFileHistoryInView",
					"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && config.gitlens.menus.explorer.history",
					"group": "4_timeline@2"
				},
				{
					"command": "gitlens.quickOpenFileHistory",
					"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && config.gitlens.menus.explorer.history",
					"group": "4_timeline@3"
				},
				{
					"command": "gitlens.copyRemoteFileUrlToClipboard",
					"when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled && gitlens:hasRemotes && config.gitlens.menus.explorer.clipboard",
					"group": "6_copypath@100"
				}
			],
			"extension/context": [
				{
					"command": "gitlens.showWelcomePage",
					"when": "extension =~ /^eamodio.gitlens(-insiders)?$/ && extensionStatus == installed",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.showSettingsPage",
					"when": "extension =~ /^eamodio.gitlens(-insiders)?$/ && extensionStatus == installed",
					"group": "9_gitlens@2"
				}
			],
			"git.commit": [
				{
					"command": "gitlens.addAuthors",
					"when": "gitlens:enabled && !gitlens:readonly && config.gitlens.menus.scm.authors",
					"group": "4_gitlens@1"
				}
			],
			"scm/resourceGroup/context": [
				{
					"command": "gitlens.stashSave",
					"when": "gitlens:enabled && !gitlens:readonly && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroupInline.stash",
					"group": "inline@-1"
				},
				{
					"command": "gitlens.stashSave",
					"when": "gitlens:enabled && !gitlens:readonly && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.stash",
					"group": "1_modification@100"
				},
				{
					"submenu": "gitlens/scm/resourceGroup/openChanges",
					"when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.compare",
					"group": "2_gitlens@3"
				},
				{
					"command": "gitlens.openChangedFiles",
					"when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.openClose",
					"group": "3_gitlens@1"
				},
				{
					"command": "gitlens.closeUnchangedFiles",
					"when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.openClose",
					"group": "3_gitlens@2"
				}
			],
			"scm/resourceState/context": [
				{
					"submenu": "gitlens/scm/resourceState/openChanges",
					"when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.compare",
					"group": "navigation"
				},
				{
					"command": "gitlens.openFileOnRemote",
					"when": "gitlens:enabled && gitlens:hasRemotes && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.remote",
					"group": "navigation@96",
					"alt": "gitlens.copyRemoteFileUrlToClipboard"
				},
				{
					"command": "gitlens.openFileOnRemoteFrom",
					"when": "gitlens:enabled && gitlens:hasRemotes && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.remote",
					"group": "navigation@97",
					"alt": "gitlens.copyRemoteFileUrlFrom"
				},
				{
					"command": "gitlens.stashSaveFiles",
					"when": "gitlens:enabled && !gitlens:readonly && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmItem.stash",
					"group": "1_modification@2"
				},
				{
					"command": "gitlens.copyRemoteFileUrlToClipboard",
					"when": "gitlens:enabled && gitlens:hasRemotes && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.clipboard",
					"group": "2_gitlens@1"
				},
				{
					"command": "gitlens.showFileHistoryInView",
					"when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.history",
					"group": "4_timeline@2"
				},
				{
					"command": "gitlens.quickOpenFileHistory",
					"when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.history",
					"group": "4_timeline@3"
				}
			],
			"timeline/item/context": [
				{
					"command": "gitlens.openCommitOnRemote",
					"when": "gitlens:enabled && gitlens:hasRemotes && timelineItem =~ /git:file:commit\\b/",
					"group": "inline@99",
					"alt": "gitlens.copyRemoteCommitUrl"
				}
			],
			"view/title": [
				{
					"command": "gitlens.closeUpdatesView",
					"when": "view == gitlens.views.updates",
					"group": "navigation@1"
				},
				{
					"command": "gitlens.closeWelcomeView",
					"when": "view == gitlens.views.welcome",
					"group": "navigation@1"
				},
				{
					"command": "gitlens.views.switchToAnotherBranch",
					"when": "!gitlens:readonly && view =~ /^gitlens\\.views\\.branches/",
					"group": "navigation@10"
				},
				{
					"command": "gitlens.views.createBranch",
					"when": "!gitlens:readonly && view =~ /gitlens\\.views\\.branches\\b/",
					"group": "navigation@11"
				},
				{
					"command": "gitlens.views.branches.setLayoutToList",
					"when": "view =~ /gitlens\\.views\\.branches/ && config.gitlens.views.branches.branches.layout == tree",
					"group": "navigation@50"
				},
				{
					"command": "gitlens.views.branches.setLayoutToTree",
					"when": "view =~ /gitlens\\.views\\.branches/ && config.gitlens.views.branches.branches.layout == list",
					"group": "navigation@50"
				},
				{
					"command": "gitlens.views.branches.refresh",
					"when": "view =~ /^gitlens\\.views\\.branches/",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.views.branches.setFilesLayoutToAuto",
					"when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.files.layout == tree",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.branches.setFilesLayoutToList",
					"when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.files.layout == auto",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.branches.setFilesLayoutToTree",
					"when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.files.layout == list",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.branches.setShowAvatarsOn",
					"when": "view =~ /^gitlens\\.views\\.branches/ && !config.gitlens.views.branches.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.branches.setShowAvatarsOff",
					"when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.branches.setShowBranchComparisonOn",
					"when": "view =~ /^gitlens\\.views\\.branches/ && !config.gitlens.views.branches.showBranchComparison",
					"group": "5_gitlens@1"
				},
				{
					"command": "gitlens.views.branches.setShowBranchComparisonOff",
					"when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.showBranchComparison",
					"group": "5_gitlens@1"
				},
				{
					"command": "gitlens.views.branches.setShowBranchPullRequestOn",
					"when": "view =~ /^gitlens\\.views\\.branches/ && !config.gitlens.views.branches.pullRequests.enabled && !config.gitlens.views.branches.pullRequests.showForBranches",
					"group": "5_gitlens@2"
				},
				{
					"command": "gitlens.views.branches.setShowBranchPullRequestOff",
					"when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.pullRequests.enabled && config.gitlens.views.branches.pullRequests.showForBranches",
					"group": "5_gitlens@2"
				},
				{
					"command": "gitlens.pushRepositories",
					"when": "gitlens:hasRemotes && !gitlens:readonly && view =~ /^gitlens\\.views\\.commits/",
					"group": "navigation@1"
				},
				{
					"command": "gitlens.pullRepositories",
					"when": "gitlens:hasRemotes && !gitlens:readonly && view =~ /^gitlens\\.views\\.commits/",
					"group": "navigation@2"
				},
				{
					"command": "gitlens.fetchRepositories",
					"when": "gitlens:hasRemotes && !gitlens:readonly && view =~ /^gitlens\\.views\\.commits/",
					"group": "navigation@3"
				},
				{
					"command": "gitlens.views.switchToAnotherBranch",
					"when": "!gitlens:readonly && view =~ /^gitlens\\.views\\.commits/",
					"group": "navigation@10"
				},
				{
					"command": "gitlens.views.commits.setMyCommitsOnlyOff",
					"when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:views:commits:myCommitsOnly",
					"group": "navigation@50"
				},
				{
					"command": "gitlens.views.commits.refresh",
					"when": "view =~ /^gitlens\\.views\\.commits/",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.views.commits.setMyCommitsOnlyOn",
					"when": "view =~ /^gitlens\\.views\\.commits/ && !gitlens:views:commits:myCommitsOnly",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.commits.setMyCommitsOnlyOff",
					"when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:views:commits:myCommitsOnly",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.commits.setFilesLayoutToAuto",
					"when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.files.layout == tree",
					"group": "3_gitlens@1"
				},
				{
					"command": "gitlens.views.commits.setFilesLayoutToList",
					"when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.files.layout == auto",
					"group": "3_gitlens@1"
				},
				{
					"command": "gitlens.views.commits.setFilesLayoutToTree",
					"when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.files.layout == list",
					"group": "3_gitlens@1"
				},
				{
					"command": "gitlens.views.commits.setShowAvatarsOn",
					"when": "view =~ /^gitlens\\.views\\.commits/ && !config.gitlens.views.commits.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.commits.setShowAvatarsOff",
					"when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.commits.setShowBranchComparisonOn",
					"when": "view =~ /^gitlens\\.views\\.commits/ && !config.gitlens.views.commits.showBranchComparison",
					"group": "5_gitlens@1"
				},
				{
					"command": "gitlens.views.commits.setShowBranchComparisonOff",
					"when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.showBranchComparison",
					"group": "5_gitlens@1"
				},
				{
					"command": "gitlens.views.commits.setShowBranchPullRequestOn",
					"when": "view =~ /^gitlens\\.views\\.commits/ && !config.gitlens.views.commits.pullRequests.enabled && !config.gitlens.views.commits.pullRequests.showForBranches",
					"group": "5_gitlens@2"
				},
				{
					"command": "gitlens.views.commits.setShowBranchPullRequestOff",
					"when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.pullRequests.enabled && config.gitlens.views.commits.pullRequests.showForBranches",
					"group": "5_gitlens@2"
				},
				{
					"command": "gitlens.showRepositoriesView",
					"when": "view =~ /^gitlens\\.views\\.commits/",
					"group": "8_gitlens_toggles@0"
				},
				{
					"command": "gitlens.views.addAuthors",
					"when": "view =~ /^gitlens\\.views\\.contributors/",
					"group": "navigation@10"
				},
				{
					"command": "gitlens.views.contributors.refresh",
					"when": "view =~ /^gitlens\\.views\\.contributors/",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.views.contributors.setFilesLayoutToAuto",
					"when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.files.layout == tree",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.contributors.setFilesLayoutToList",
					"when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.files.layout == auto",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.contributors.setFilesLayoutToTree",
					"when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.files.layout == list",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.contributors.setShowAvatarsOn",
					"when": "view =~ /^gitlens\\.views\\.contributors/ && !config.gitlens.views.contributors.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.contributors.setShowAvatarsOff",
					"when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.fileHistory.setEditorFollowingOn",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/ && gitlens:views:fileHistory:canPin && !gitlens:views:fileHistory:editorFollowing",
					"group": "navigation@10"
				},
				{
					"command": "gitlens.views.fileHistory.setEditorFollowingOff",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/ && gitlens:views:fileHistory:canPin && gitlens:views:fileHistory:editorFollowing",
					"group": "navigation@10"
				},
				{
					"command": "gitlens.views.fileHistory.setCursorFollowingOn",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing",
					"group": "navigation@11"
				},
				{
					"command": "gitlens.views.fileHistory.setCursorFollowingOff",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/ && gitlens:views:fileHistory:cursorFollowing",
					"group": "navigation@11"
				},
				{
					"command": "gitlens.views.fileHistory.refresh",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.views.fileHistory.changeBase",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/",
					"group": "1_gitlens@0"
				},
				{
					"command": "gitlens.views.fileHistory.setRenameFollowingOn",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && config.gitlens.advanced.fileHistoryShowAllBranches",
					"group": "3_gitlens@1"
				},
				{
					"command": "gitlens.views.fileHistory.setRenameFollowingOn",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && !config.gitlens.advanced.fileHistoryShowAllBranches && !config.gitlens.advanced.fileHistoryFollowsRenames",
					"group": "3_gitlens@1"
				},
				{
					"command": "gitlens.views.fileHistory.setRenameFollowingOff",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && !config.gitlens.advanced.fileHistoryShowAllBranches && config.gitlens.advanced.fileHistoryFollowsRenames",
					"group": "3_gitlens@1"
				},
				{
					"command": "gitlens.views.fileHistory.setShowAllBranchesOn",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && !config.gitlens.advanced.fileHistoryShowAllBranches",
					"group": "3_gitlens@2"
				},
				{
					"command": "gitlens.views.fileHistory.setShowAllBranchesOff",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && config.gitlens.advanced.fileHistoryShowAllBranches",
					"group": "3_gitlens@2"
				},
				{
					"command": "gitlens.views.fileHistory.setShowAvatarsOn",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/ && !config.gitlens.views.fileHistory.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.fileHistory.setShowAvatarsOff",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/ && config.gitlens.views.fileHistory.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.showLineHistoryView",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/",
					"group": "8_gitlens_toggles@0"
				},
				{
					"command": "gitlens.views.lineHistory.setEditorFollowingOn",
					"when": "view =~ /^gitlens\\.views\\.lineHistory/ && !gitlens:views:lineHistory:editorFollowing",
					"group": "navigation@10"
				},
				{
					"command": "gitlens.views.lineHistory.setEditorFollowingOff",
					"when": "view =~ /^gitlens\\.views\\.lineHistory/ && gitlens:views:lineHistory:editorFollowing",
					"group": "navigation@10"
				},
				{
					"command": "gitlens.views.lineHistory.refresh",
					"when": "view =~ /^gitlens\\.views\\.lineHistory/",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.views.lineHistory.changeBase",
					"when": "view =~ /^gitlens\\.views\\.lineHistory/",
					"group": "1_gitlens@0"
				},
				{
					"command": "gitlens.views.lineHistory.setShowAvatarsOn",
					"when": "view =~ /^gitlens\\.views\\.lineHistory/ && !config.gitlens.views.lineHistory.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.lineHistory.setShowAvatarsOff",
					"when": "view =~ /^gitlens\\.views\\.lineHistory/ && config.gitlens.views.lineHistory.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.addRemote",
					"when": "!gitlens:readonly && view =~ /gitlens\\.views\\.remotes/",
					"group": "navigation@1"
				},
				{
					"command": "gitlens.views.remotes.setLayoutToList",
					"when": "view =~ /gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.branches.layout == tree",
					"group": "navigation@50"
				},
				{
					"command": "gitlens.views.remotes.setLayoutToTree",
					"when": "view =~ /gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.branches.layout == list",
					"group": "navigation@50"
				},
				{
					"command": "gitlens.views.remotes.refresh",
					"when": "view =~ /^gitlens\\.views\\.remotes/",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.views.remotes.setFilesLayoutToAuto",
					"when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.files.layout == tree",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.remotes.setFilesLayoutToList",
					"when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.files.layout == auto",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.remotes.setFilesLayoutToTree",
					"when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.files.layout == list",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.remotes.setShowAvatarsOn",
					"when": "view =~ /^gitlens\\.views\\.remotes/ && !config.gitlens.views.remotes.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.remotes.setShowAvatarsOff",
					"when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.remotes.setShowBranchPullRequestOn",
					"when": "view =~ /^gitlens\\.views\\.remotes/ && !config.gitlens.views.remotes.pullRequests.enabled && !config.gitlens.views.remotes.pullRequests.showForBranches",
					"group": "5_gitlens@2"
				},
				{
					"command": "gitlens.views.remotes.setShowBranchPullRequestOff",
					"when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.pullRequests.enabled && config.gitlens.views.remotes.pullRequests.showForBranches",
					"group": "5_gitlens@2"
				},
				{
					"command": "gitlens.pushRepositories",
					"when": "gitlens:hasRemotes && !gitlens:readonly && view =~ /^gitlens\\.views\\.repositories/",
					"group": "navigation@1"
				},
				{
					"command": "gitlens.pullRepositories",
					"when": "gitlens:hasRemotes && !gitlens:readonly && view =~ /^gitlens\\.views\\.repositories/",
					"group": "navigation@2"
				},
				{
					"command": "gitlens.fetchRepositories",
					"when": "gitlens:hasRemotes && !gitlens:readonly && view =~ /^gitlens\\.views\\.repositories/",
					"group": "navigation@3"
				},
				{
					"command": "gitlens.views.repositories.refresh",
					"when": "view =~ /^gitlens\\.views\\.repositories/",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.views.repositories.setAutoRefreshToOn",
					"when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.autoRefresh && !gitlens:views:repositories:autoRefresh",
					"group": "2_gitlens@0"
				},
				{
					"command": "gitlens.views.repositories.setAutoRefreshToOff",
					"when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.autoRefresh && gitlens:views:repositories:autoRefresh",
					"group": "2_gitlens@0"
				},
				{
					"command": "gitlens.views.repositories.setFilesLayoutToAuto",
					"when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.files.layout == tree",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.repositories.setFilesLayoutToList",
					"when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.files.layout == auto",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.repositories.setFilesLayoutToTree",
					"when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.files.layout == list",
					"group": "3_gitlens@0"
				},
				{
					"submenu": "gitlens/view/repositories/sections",
					"when": "view =~ /^gitlens\\.views\\.repositories/",
					"group": "4_gitlens@1"
				},
				{
					"command": "gitlens.views.repositories.setShowAvatarsOn",
					"when": "view =~ /^gitlens\\.views\\.repositories/ && !config.gitlens.views.repositories.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.repositories.setShowAvatarsOff",
					"when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.avatars",
					"group": "5_gitlens@0"
				},
				{
					"submenu": "gitlens/view/searchAndCompare/new",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
					"group": "navigation@10"
				},
				{
					"command": "gitlens.views.searchAndCompare.setKeepResultsToOn",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && !gitlens:views:searchAndCompare:keepResults",
					"group": "navigation@12"
				},
				{
					"command": "gitlens.views.searchAndCompare.setKeepResultsToOff",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && gitlens:views:searchAndCompare:keepResults",
					"group": "navigation@13"
				},
				{
					"command": "gitlens.views.searchAndCompare.clear",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
					"group": "navigation@98"
				},
				{
					"command": "gitlens.views.searchAndCompare.refresh",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.views.searchAndCompare.setFilesLayoutToAuto",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.files.layout == tree",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.searchAndCompare.setFilesLayoutToList",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.files.layout == auto",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.searchAndCompare.setFilesLayoutToTree",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.files.layout == list",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.searchAndCompare.setShowAvatarsOn",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && !config.gitlens.views.searchAndCompare.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.searchAndCompare.setShowAvatarsOff",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.stashSave",
					"when": "!gitlens:readonly && view =~ /^gitlens\\.views\\.stashes/",
					"group": "navigation@10"
				},
				{
					"command": "gitlens.stashApply",
					"when": "!gitlens:readonly && view =~ /^gitlens\\.views\\.stashes/",
					"group": "navigation@11"
				},
				{
					"command": "gitlens.views.stashes.setFilesLayoutToAuto",
					"when": "view =~ /^gitlens\\.views\\.stashes/ && config.gitlens.views.stashes.files.layout == tree",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.stashes.setFilesLayoutToList",
					"when": "view =~ /^gitlens\\.views\\.stashes/ && config.gitlens.views.stashes.files.layout == auto",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.stashes.setFilesLayoutToTree",
					"when": "view =~ /^gitlens\\.views\\.stashes/ && config.gitlens.views.stashes.files.layout == list",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.stashes.refresh",
					"when": "view =~ /^gitlens\\.views\\.stashes/",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.views.createTag",
					"when": "!gitlens:readonly && view =~ /gitlens\\.views\\.tags\\b/",
					"group": "navigation@10"
				},
				{
					"command": "gitlens.views.tags.setLayoutToList",
					"when": "view =~ /gitlens\\.views\\.tags/ && config.gitlens.views.tags.branches.layout == tree",
					"group": "navigation@50"
				},
				{
					"command": "gitlens.views.tags.setLayoutToTree",
					"when": "view =~ /gitlens\\.views\\.tags/ && config.gitlens.views.tags.branches.layout == list",
					"group": "navigation@50"
				},
				{
					"command": "gitlens.views.tags.refresh",
					"when": "view =~ /^gitlens\\.views\\.tags/",
					"group": "navigation@99"
				},
				{
					"command": "gitlens.views.tags.setFilesLayoutToAuto",
					"when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.files.layout == tree",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.tags.setFilesLayoutToList",
					"when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.files.layout == auto",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.tags.setFilesLayoutToTree",
					"when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.files.layout == list",
					"group": "3_gitlens@0"
				},
				{
					"command": "gitlens.views.tags.setShowAvatarsOn",
					"when": "view =~ /^gitlens\\.views\\.tags/ && !config.gitlens.views.tags.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.tags.setShowAvatarsOff",
					"when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.avatars",
					"group": "5_gitlens@0"
				},
				{
					"command": "gitlens.views.setShowRelativeDateMarkersOn",
					"when": "view =~ /^gitlens\\.views\\.(branches|commits|fileHistory|lineHistory|remotes|repositories|tags)/ && !config.gitlens.views.showRelativeDateMarkers",
					"group": "5_gitlens@3"
				},
				{
					"command": "gitlens.views.setShowRelativeDateMarkersOff",
					"when": "view =~ /^gitlens\\.views\\.(branches|commits|fileHistory|lineHistory|remotes|repositories|tags)/ && config.gitlens.views.showRelativeDateMarkers",
					"group": "5_gitlens@3"
				},
				{
					"command": "gitlens.showSettingsPage#branches-view",
					"when": "view =~ /^gitlens\\.views\\.branches/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.showSettingsPage#commits-view",
					"when": "view =~ /^gitlens\\.views\\.commits/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.showSettingsPage#contributors-view",
					"when": "view =~ /^gitlens\\.views\\.contributors/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.showSettingsPage#file-history-view",
					"when": "view =~ /^gitlens\\.views\\.fileHistory/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.showSettingsPage#line-history-view",
					"when": "view =~ /^gitlens\\.views\\.lineHistory/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.showSettingsPage#remotes-view",
					"when": "view =~ /^gitlens\\.views\\.remotes/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.showSettingsPage#repositories-view",
					"when": "view =~ /^gitlens\\.views\\.repositories/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.showSettingsPage#search-compare-view",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.showSettingsPage#stashes-view",
					"when": "view =~ /^gitlens\\.views\\.stashes/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.showSettingsPage#tags-view",
					"when": "view =~ /^gitlens\\.views\\.tags/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.supportGitLens",
					"when": "view =~ /^gitlens\\.views\\.(?!(welcome|updates))/",
					"group": "9_gitlens@-1"
				}
			],
			"view/item/context": [
				{
					"command": "gitlens.views.switchToAnotherBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branches\\b/",
					"group": "inline@10"
				},
				{
					"command": "gitlens.views.createBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branches\\b/",
					"group": "inline@11"
				},
				{
					"command": "gitlens.views.repositories.setBranchesLayoutToList",
					"when": "viewItem =~ /gitlens:branches\\b/ && config.gitlens.views.repositories.branches.layout == tree",
					"group": "inline@50"
				},
				{
					"command": "gitlens.views.repositories.setBranchesLayoutToTree",
					"when": "viewItem =~ /gitlens:branches\\b/ && config.gitlens.views.repositories.branches.layout == list",
					"group": "inline@50"
				},
				{
					"command": "gitlens.openBranchesOnRemote",
					"when": "viewItem =~ /gitlens:branches\\b(?=.*?\\b\\+remotes\\b)/",
					"group": "inline@98",
					"alt": "gitlens.copyRemoteBranchesUrl"
				},
				{
					"command": "gitlens.views.switchToAnotherBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branches\\b/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.createBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branches\\b/",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.openBranchesOnRemote",
					"when": "viewItem =~ /gitlens:branches\\b(?=.*?\\b\\+remotes\\b)/",
					"group": "2_gitlens_quickopen@1",
					"alt": "gitlens.copyRemoteBranchesUrl"
				},
				{
					"command": "gitlens.views.repositories.setBranchesShowBranchComparisonOn",
					"when": "view =~ /^gitlens\\.views\\.repositories/ && viewItem =~ /gitlens:branches\\b/ && !config.gitlens.views.repositories.branches.showBranchComparison",
					"group": "8_gitlens_toggles@1"
				},
				{
					"command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
					"when": "view =~ /^gitlens\\.views\\.repositories/ && viewItem =~ /gitlens:branches\\b/ && config.gitlens.views.repositories.branches.showBranchComparison",
					"group": "8_gitlens_toggles@1"
				},
				{
					"command": "gitlens.views.switchToBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
					"group": "inline@7"
				},
				{
					"command": "gitlens.views.switchToAnotherBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)/",
					"group": "inline@7"
				},
				{
					"command": "gitlens.views.publishBranch",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+remote\\b)(?!.*?\\b\\+tracking\\b)/",
					"group": "inline@8"
				},
				{
					"command": "gitlens.views.push",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)/",
					"group": "inline@8"
				},
				{
					"command": "gitlens.views.pull",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+behind\\b)/",
					"group": "inline@8"
				},
				{
					"command": "gitlens.views.fetch",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)(?!.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)/",
					"group": "inline@8"
				},
				{
					"command": "gitlens.views.undoCommit",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+HEAD\\b)/",
					"group": "inline@95"
				},
				{
					"command": "gitlens.views.push",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
					"group": "inline@96"
				},
				{
					"command": "gitlens.views.pushToCommit",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
					"group": "inline@96"
				},
				{
					"command": "gitlens.views.compareWithHead",
					"when": "viewItem =~ /gitlens:(branch\\b(?!.*?\\b\\+current\\b)|commit\\b|stash\\b|tag\\b)/",
					"group": "inline@97",
					"alt": "gitlens.views.compareWithWorking"
				},
				{
					"command": "gitlens.views.compareWithWorking",
					"when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)/",
					"group": "inline@97"
				},
				{
					"command": "gitlens.views.star",
					"when": "viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+starred\\b)/",
					"group": "inline@98"
				},
				{
					"command": "gitlens.views.unstar",
					"when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+starred\\b)/",
					"group": "inline@98"
				},
				{
					"command": "gitlens.openBranchOnRemote",
					"when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
					"group": "inline@99",
					"alt": "gitlens.copyRemoteBranchUrl"
				},
				{
					"command": "gitlens.views.switchToAnotherBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.switchToBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.mergeBranchInto",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@3"
				},
				{
					"command": "gitlens.views.rebaseOntoBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@4"
				},
				{
					"command": "gitlens.views.rebaseOntoUpstream",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+tracking\\b)/",
					"group": "1_gitlens_actions@4"
				},
				{
					"command": "gitlens.views.renameBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b/",
					"group": "1_gitlens_actions@5"
				},
				{
					"command": "gitlens.views.deleteBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@6"
				},
				{
					"command": "gitlens.views.createBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b/",
					"group": "1_gitlens_actions_@7"
				},
				{
					"command": "gitlens.views.createTag",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:branch\\b/",
					"group": "1_gitlens_actions_@8"
				},
				{
					"command": "gitlens.views.createPullRequest",
					"when": "gitlens:action:createPullRequest && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
					"group": "1_gitlens_actions_@9"
				},
				{
					"command": "gitlens.openBranchOnRemote",
					"when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
					"group": "2_gitlens_quickopen@1",
					"alt": "gitlens.copyRemoteBranchUrl"
				},
				{
					"command": "gitlens.views.openDirectoryDiffWithWorking",
					"when": "viewItem =~ /gitlens:(branch|tag)\\b/",
					"group": "3_gitlens_explore@2"
				},
				{
					"command": "gitlens.views.compareWithUpstream",
					"when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+tracking\\b)/",
					"group": "4_gitlens_compare@1"
				},
				{
					"command": "gitlens.views.compareWithHead",
					"when": "viewItem =~ /gitlens:(branch\\b(?!.*?\\b\\+current\\b)|commit\\b|stash\\b|tag\\b)/",
					"group": "4_gitlens_compare@2"
				},
				{
					"command": "gitlens.views.compareWithWorking",
					"when": "viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
					"group": "4_gitlens_compare@3"
				},
				{
					"command": "gitlens.views.compareAncestryWithWorking",
					"when": "viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
					"group": "4_gitlens_compare@4"
				},
				{
					"command": "gitlens.views.compareWithSelected",
					"when": "viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/ && gitlens:views:canCompare",
					"group": "4_gitlens_compare@98"
				},
				{
					"command": "gitlens.views.selectForCompare",
					"when": "viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
					"group": "4_gitlens_compare@99"
				},
				{
					"command": "gitlens.views.compareFileWithSelected",
					"when": "viewItem =~ /gitlens:file\\b/ && gitlens:views:canCompare:file",
					"group": "4_gitlens_compare@98"
				},
				{
					"command": "gitlens.views.selectFileForCompare",
					"when": "viewItem =~ /gitlens:file\\b(?!.*?\\b\\+conflicted\\b)/",
					"group": "4_gitlens_compare@99"
				},
				{
					"command": "gitlens.views.star",
					"when": "viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+starred\\b)/",
					"group": "8_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.unstar",
					"when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+starred\\b)/",
					"group": "8_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.addAuthors",
					"when": "viewItem =~ /gitlens:contributors\\b/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.addAuthors",
					"when": "viewItem =~ /gitlens:contributors\\b/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.inviteToLiveShare",
					"when": "gitlens:vsls && gitlens:vsls != guest && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.addAuthor",
					"when": "viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
					"group": "inline@2"
				},
				{
					"command": "gitlens.views.copy",
					"when": "viewItem =~ /gitlens:contributor\\b/",
					"group": "inline@98"
				},
				{
					"command": "gitlens.inviteToLiveShare",
					"when": "gitlens:vsls && gitlens:vsls != guest && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.addAuthor",
					"when": "viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.copyShaToClipboard",
					"when": "viewItem =~ /gitlens:commit\\b/",
					"group": "inline@98",
					"alt": "gitlens.copyMessageToClipboard"
				},
				{
					"command": "gitlens.openCommitOnRemote",
					"when": "viewItem =~ /gitlens:commit\\b/ && gitlens:hasRemotes",
					"group": "inline@99",
					"alt": "gitlens.copyRemoteCommitUrl"
				},
				{
					"command": "gitlens.views.cherryPick",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.undoCommit",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+HEAD\\b)/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.push",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.views.pushToCommit",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.views.revert",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@3"
				},
				{
					"command": "gitlens.views.resetToCommit",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@4"
				},
				{
					"command": "gitlens.views.resetCommit",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@5"
				},
				{
					"command": "gitlens.views.rebaseOntoCommit",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b/",
					"group": "1_gitlens_actions@6"
				},
				{
					"command": "gitlens.views.switchToCommit",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b/",
					"group": "1_gitlens_actions@7"
				},
				{
					"command": "gitlens.views.createBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b/",
					"group": "1_gitlens_actions_1@1"
				},
				{
					"command": "gitlens.views.createTag",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:commit\\b/",
					"group": "1_gitlens_actions_1@2"
				},
				{
					"submenu": "gitlens/commit/openChanges",
					"when": "viewItem =~ /gitlens:(commit|stash|results:files)\\b/",
					"group": "2_gitlens_quickopen@1"
				},
				{
					"command": "gitlens.openCommitOnRemote",
					"when": "viewItem =~ /gitlens:commit\\b/ && gitlens:hasRemotes",
					"group": "3_gitlens_explore@0",
					"alt": "gitlens.copyRemoteCommitUrl"
				},
				{
					"command": "gitlens.revealCommitInView",
					"when": "view =~ /gitlens\\.views\\.(?!commits|branches\\b)/ && viewItem =~ /gitlens:commit\\b/",
					"group": "3_gitlens_explore@2"
				},
				{
					"command": "gitlens.showCommitInView",
					"when": "viewItem =~ /gitlens:commit\\b/",
					"group": "3_gitlens_explore@3"
				},
				{
					"submenu": "gitlens/commit/copy",
					"when": "viewItem =~ /gitlens:(branch|commit|stash|tag|file\\b(?=.*?\\b\\+committed\\b))\\b/",
					"group": "7_gitlens_cutcopypaste@2"
				},
				{
					"command": "gitlens.views.openFile",
					"when": "viewItem =~ /gitlens:(history:(file|line)|status:file)\\b/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.undoCommit",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+HEAD\\b)/",
					"group": "inline@-2"
				},
				{
					"command": "gitlens.views.push",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
					"group": "inline@-1"
				},
				{
					"command": "gitlens.views.pushToCommit",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
					"group": "inline@-1"
				},
				{
					"command": "gitlens.views.openFile",
					"when": "view =~ /gitlens\\.views\\.(?!(fileHistory|lineHistory)\\b)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+(committed|stashed)\\b)/",
					"group": "inline@1",
					"alt": "gitlens.views.openFileRevision"
				},
				{
					"command": "gitlens.views.openFileRevision",
					"when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory)\\b/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+(committed|stashed)\\b)/",
					"group": "inline@1",
					"alt": "gitlens.views.openFile"
				},
				{
					"command": "gitlens.views.openChanges",
					"when": "view =~ /gitlens\\.views\\.(?!fileHistory|lineHistory)\\b/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+conflicted\\b)/",
					"group": "inline@96"
				},
				{
					"command": "gitlens.views.openFile",
					"when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory)\\b/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+conflicted\\b)/",
					"group": "inline@96"
				},
				{
					"command": "gitlens.views.openChangesWithWorking",
					"when": "viewItem =~ /gitlens:file\\b(?!.*?\\b\\+(conflicted|unstaged)\\b)/",
					"group": "inline@96"
				},
				{
					"command": "gitlens.views.stageFile",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+unstaged\\b)/",
					"group": "inline@97"
				},
				{
					"command": "gitlens.views.unstageFile",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+staged\\b)/",
					"group": "inline@97"
				},
				{
					"command": "gitlens.copyShaToClipboard",
					"when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory)\\b/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
					"group": "inline@98",
					"alt": "gitlens.copyMessageToClipboard"
				},
				{
					"command": "gitlens.openFileOnRemote",
					"when": "viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/ && gitlens:hasRemotes",
					"group": "inline@99",
					"alt": "gitlens.copyRemoteFileUrlToClipboard"
				},
				{
					"submenu": "gitlens/commit/file/commit",
					"when": "!gitlens:readonly && view =~ /^gitlens\\.views\\.(fileHistory|lineHistory)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
					"group": "1_gitlens_actions@0"
				},
				{
					"command": "gitlens.views.stageFile",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+unstaged\\b)/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.unstageFile",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+staged\\b)/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.stashSaveFiles",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+(un)?staged\\b)/",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.views.openChanges",
					"when": "viewItem =~ /gitlens:file\\b/",
					"group": "2_gitlens_quickopen@1"
				},
				{
					"submenu": "gitlens/commit/file/openChanges",
					"when": "viewItem =~ /gitlens:file\\b/",
					"group": "2_gitlens_quickopen@2"
				},
				{
					"command": "gitlens.views.openFile",
					"when": "viewItem =~ /gitlens:(file|history:(file|line)|status:file)\\b/",
					"group": "2_gitlens_quickopen@3"
				},
				{
					"command": "gitlens.views.openFileRevision",
					"when": "viewItem =~ /gitlens:file\\b((?=.*?\\b\\+(committed|stashed)\\b)|:results)/",
					"group": "2_gitlens_quickopen@4"
				},
				{
					"command": "gitlens.openFileOnRemote",
					"when": "viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/ && gitlens:hasRemotes",
					"group": "2_gitlens_quickopen@5",
					"alt": "gitlens.copyRemoteFileUrlToClipboard"
				},
				{
					"command": "gitlens.showFileHistoryInView",
					"when": "view != gitlens.views.fileHistory && viewItem =~ /gitlens:file\\b/",
					"group": "2_gitlens_quickopen@6"
				},
				{
					"command": "gitlens.openCommitOnRemote",
					"when": "view =~ /^gitlens\\.views\\.(fileHistory|lineHistory)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/ && gitlens:hasRemotes",
					"group": "3_gitlens_explore@0",
					"alt": "gitlens.copyRemoteCommitUrl"
				},
				{
					"command": "gitlens.revealCommitInView",
					"when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory\\b)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
					"group": "3_gitlens_explore@2"
				},
				{
					"command": "gitlens.showCommitInView",
					"when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory\\b)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
					"group": "3_gitlens_explore@3"
				},
				{
					"command": "gitlens.views.applyChanges",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+stashed\\b)/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.restore",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+stashed\\b)/",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.views.applyChanges",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results\\b)/",
					"group": "8_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.restore",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results\\b)/",
					"group": "8_gitlens_actions@2"
				},
				{
					"command": "gitlens.openFileOnRemote",
					"when": "viewItem =~ /gitlens:(history:(file|line)|status:file)\\b/ && gitlens:hasRemotes",
					"group": "5_gitlens_open@2",
					"alt": "gitlens.copyRemoteFileUrlToClipboard"
				},
				{
					"command": "gitlens.views.openPullRequest",
					"when": "gitlens:action:openPullRequest > 1 && viewItem =~ /gitlens:pullrequest\\b/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.openPullRequestOnRemote",
					"when": "viewItem =~ /gitlens:pullrequest\\b/",
					"group": "inline@99",
					"alt": "gitlens.copyRemotePullRequestUrl"
				},
				{
					"command": "gitlens.views.addRemote",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:remotes\\b/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.repositories.setBranchesLayoutToList",
					"when": "viewItem =~ /gitlens:remotes\\b/ && config.gitlens.views.repositories.branches.layout == tree",
					"group": "inline@50"
				},
				{
					"command": "gitlens.views.repositories.setBranchesLayoutToTree",
					"when": "viewItem =~ /gitlens:remotes\\b/ && config.gitlens.views.repositories.branches.layout == list",
					"group": "inline@50"
				},
				{
					"command": "gitlens.views.addRemote",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:remotes\\b/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.fetch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:remote\\b/",
					"group": "inline@97"
				},
				{
					"command": "gitlens.connectRemoteProvider",
					"when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+disconnected\\b)/",
					"group": "inline@98"
				},
				{
					"command": "gitlens.disconnectRemoteProvider",
					"when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+connected\\b)/",
					"group": "inline@98"
				},
				{
					"command": "gitlens.openRepoOnRemote",
					"when": "viewItem =~ /gitlens:remote\\b/",
					"group": "inline@99",
					"alt": "gitlens.copyRemoteRepositoryUrl"
				},
				{
					"command": "gitlens.views.fetch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:remote\\b/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.pruneRemote",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:remote\\b/",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.openRepoOnRemote",
					"when": "viewItem =~ /gitlens:remote\\b/",
					"group": "5_gitlens_open@1",
					"alt": "gitlens.copyRemoteRepositoryUrl"
				},
				{
					"command": "gitlens.openBranchesOnRemote",
					"when": "viewItem =~ /gitlens:remote\\b/",
					"group": "5_gitlens_open@2",
					"alt": "gitlens.copyRemoteBranchesUrl"
				},
				{
					"command": "gitlens.views.terminalRemoveRemote",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:remote\\b/",
					"group": "6_gitlens_terminal@1"
				},
				{
					"command": "gitlens.views.setAsDefault",
					"when": "viewItem =~ /gitlens:remote\\b(?!.*?\\b\\+default\\b)/",
					"group": "8_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.unsetAsDefault",
					"when": "viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+default\\b)/",
					"group": "8_gitlens_actions@1"
				},
				{
					"command": "gitlens.connectRemoteProvider",
					"when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+disconnected\\b)/",
					"group": "8_gitlens_actions@2"
				},
				{
					"command": "gitlens.disconnectRemoteProvider",
					"when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+connected\\b)/",
					"group": "8_gitlens_actions@2"
				},
				{
					"submenu": "gitlens/commit/browse",
					"when": "viewItem =~ /gitlens:(branch|commit|file\\b(?=.*?\\b\\+committed\\b)|stash|tag)\\b/",
					"group": "3_gitlens_explore@1"
				},
				{
					"command": "gitlens.views.push",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
					"group": "inline@96",
					"alt": "gitlens.views.pushWithForce"
				},
				{
					"command": "gitlens.views.pull",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
					"group": "inline@97"
				},
				{
					"command": "gitlens.views.fetch",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
					"group": "inline@98"
				},
				{
					"command": "gitlens.views.star",
					"when": "viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+starred\\b)/",
					"group": "inline@99"
				},
				{
					"command": "gitlens.views.unstar",
					"when": "viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+starred\\b)/",
					"group": "inline@99"
				},
				{
					"command": "gitlens.views.fetch",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.pull",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.push",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.pushWithForce",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.views.openInTerminal",
					"when": "viewItem =~ /gitlens:repository\\b/",
					"group": "2_gitlens_quickopen@1"
				},
				{
					"command": "gitlens.openRepoOnRemote",
					"when": "viewItem =~ /gitlens:repository\\b/ && gitlens:hasRemotes",
					"group": "2_gitlens_quickopen@2",
					"alt": "gitlens.copyRemoteRepositoryUrl"
				},
				{
					"command": "gitlens.showCommitSearch",
					"when": "viewItem =~ /gitlens:repository\\b/",
					"group": "3_gitlens_explore@1"
				},
				{
					"command": "gitlens.stashSave",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
					"group": "1_gitlens_actions_1@1"
				},
				{
					"command": "gitlens.stashApply",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:repository\\b/",
					"group": "1_gitlens_actions_1@2"
				},
				{
					"command": "gitlens.views.star",
					"when": "viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+starred\\b)/",
					"group": "8_gitlens_actions_@1"
				},
				{
					"command": "gitlens.views.unstar",
					"when": "viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+starred\\b)/",
					"group": "8_gitlens_actions_@1"
				},
				{
					"command": "gitlens.views.closeRepository",
					"when": "viewItem =~ /gitlens:repository\\b/",
					"group": "8_gitlens_actions_@2"
				},
				{
					"command": "gitlens.views.star",
					"when": "viewItem =~ /gitlens:repo-folder\\b(?!.*?\\b\\+starred\\b)/",
					"group": "inline@99"
				},
				{
					"command": "gitlens.views.unstar",
					"when": "viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+starred\\b)/",
					"group": "inline@99"
				},
				{
					"command": "gitlens.views.openInTerminal",
					"when": "viewItem =~ /gitlens:repo-folder\\b/",
					"group": "2_gitlens_quickopen@1"
				},
				{
					"command": "gitlens.openRepoOnRemote",
					"when": "viewItem =~ /gitlens:repo-folder\\b/ && gitlens:hasRemotes",
					"group": "2_gitlens_quickopen@2",
					"alt": "gitlens.copyRemoteRepositoryUrl"
				},
				{
					"command": "gitlens.views.star",
					"when": "viewItem =~ /gitlens:repo-folder\\b(?!.*?\\b\\+starred\\b)/",
					"group": "8_gitlens_actions_@1"
				},
				{
					"command": "gitlens.views.unstar",
					"when": "viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+starred\\b)/",
					"group": "8_gitlens_actions_@1"
				},
				{
					"command": "gitlens.views.closeRepository",
					"when": "viewItem =~ /gitlens:repo-folder\\b/",
					"group": "8_gitlens_actions_@2"
				},
				{
					"command": "gitlens.views.addRemote",
					"when": "!gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:status(\\-branch)?:upstream:none/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.publishBranch",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:status(\\-branch)?:upstream:none/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.push",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:status(\\-branch)?:upstream:ahead/",
					"group": "inline@1",
					"alt": "gitlens.views.pushWithForce"
				},
				{
					"command": "gitlens.views.pull",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:status(\\-branch)?:upstream:behind/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.fetch",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:status(\\-branch)?:upstream:(?!none)/",
					"group": "inline@2"
				},
				{
					"command": "gitlens.views.createPullRequest",
					"when": "gitlens:action:createPullRequest && viewItem =~ /gitlens:status:upstream:(?!none)/",
					"group": "inline@3"
				},
				{
					"command": "gitlens.openBranchOnRemote",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:status:upstream:(?!none)/",
					"group": "inline@99",
					"alt": "gitlens.copyRemoteBranchUrl"
				},
				{
					"command": "gitlens.views.push",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem == gitlens:status:upstream:ahead",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.pushWithForce",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem == gitlens:status:upstream:ahead",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.views.pull",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem == gitlens:status:upstream:behind",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.fetch",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:status:upstream:(?!none)/",
					"group": "1_gitlens_actions@3"
				},
				{
					"command": "gitlens.views.createPullRequest",
					"when": "gitlens:action:createPullRequest && viewItem =~ /gitlens:status:upstream:(?!none)/",
					"group": "1_gitlens_actions@4"
				},
				{
					"command": "gitlens.views.dismissNode",
					"when": "viewItem =~ /gitlens:(compare:picker|(compare|search):results(?!:)\\b(?!.*?\\b\\+pinned\\b))\\b(?!:(commits|files))/",
					"group": "inline@99"
				},
				{
					"command": "gitlens.views.clearNode",
					"when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
					"group": "inline@99"
				},
				{
					"command": "gitlens.views.setBranchComparisonToWorking",
					"when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+branch\\b)/",
					"group": "inline@2"
				},
				{
					"command": "gitlens.views.setBranchComparisonToBranch",
					"when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+working\\b)/",
					"group": "inline@2"
				},
				{
					"command": "gitlens.views.setBranchComparisonToWorking",
					"when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+branch\\b)/",
					"group": "1_gitlens@2"
				},
				{
					"command": "gitlens.views.setBranchComparisonToBranch",
					"when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+working\\b)/",
					"group": "1_gitlens@2"
				},
				{
					"command": "gitlens.views.branches.setShowBranchComparisonOff",
					"when": "view =~ /gitlens\\.views\\.branches\\b/ && viewItem =~ /gitlens:compare:branch\\b/",
					"group": "8_gitlens_toggles@1"
				},
				{
					"command": "gitlens.views.commits.setShowBranchComparisonOff",
					"when": "view =~ /gitlens\\.views\\.commits\\b/ && viewItem =~ /gitlens:compare:branch\\b/",
					"group": "8_gitlens_toggles@1"
				},
				{
					"command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
					"when": "view =~ /gitlens\\.views\\.repositories\\b/ && viewItem =~ /gitlens:compare:branch(?!.*?\\b\\+root\\b)\\b/",
					"group": "8_gitlens_toggles@1"
				},
				{
					"command": "gitlens.views.repositories.setShowSectionOff",
					"when": "view =~ /gitlens\\.views\\.repositories\\b/ && viewItem =~ /gitlens:(compare:branch(?=.*?\\b\\+root\\b)|branches|branch(?=.*?\\b\\+commits\\b)|reflog|remotes|stashes|status:upstream|tags)\\b/",
					"group": "8_gitlens_toggles@99"
				},
				{
					"command": "gitlens.views.clearNode",
					"when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.views.searchAndCompare.swapComparison",
					"when": "viewItem =~ /gitlens:compare:results(?!:)\\b/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.refreshNode",
					"when": "viewItem =~ /gitlens:compare:(branch(?=.*?\\b\\+comparing\\b)|results(?!:))\\b/",
					"group": "inline@97"
				},
				{
					"command": "gitlens.views.refreshNode",
					"when": "viewItem =~ /gitlens:search:results(?!:)\\b/",
					"group": "inline@97"
				},
				{
					"command": "gitlens.views.searchAndCompare.pin",
					"when": "viewItem =~ /gitlens:(compare|search):results(?!:)\\b(?!.*?\\b\\+pinned\\b)/",
					"group": "inline@98"
				},
				{
					"command": "gitlens.views.searchAndCompare.unpin",
					"when": "viewItem =~ /gitlens:(compare|search):results(?!:)\\b(?=.*?\\b\\+pinned\\b)/",
					"group": "inline@98"
				},
				{
					"command": "gitlens.views.searchAndCompare.swapComparison",
					"when": "viewItem =~ /gitlens:compare:results(?!:)\\b/",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.views.openDirectoryDiff",
					"when": "viewItem =~ /gitlens:compare:results(?!:)\\b/",
					"group": "2_gitlens_quickopen@1"
				},
				{
					"command": "gitlens.views.searchAndCompare.pin",
					"when": "viewItem =~ /gitlens:(compare|search):results(?!:)\\b(?!.*?\\b\\+pinned\\b)/",
					"group": "8_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.searchAndCompare.unpin",
					"when": "viewItem =~ /gitlens:(compare|search):results(?!:)\\b(?=.*?\\b\\+pinned\\b)/",
					"group": "8_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.searchAndCompare.edit",
					"when": "viewItem =~ /gitlens:search:results(?!:)\\b/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.searchAndCompare.edit",
					"when": "viewItem =~ /gitlens:search:results(?!:)\\b/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.openComparisonOnRemote",
					"when": "viewItem =~ /gitlens:compare:results:commits\\b/",
					"group": "inline@99",
					"alt": "gitlens.copyRemoteComparisonUrl"
				},
				{
					"command": "gitlens.openComparisonOnRemote",
					"when": "viewItem =~ /gitlens:compare:results:commits\\b/",
					"group": "3_gitlens_explore@0",
					"alt": "gitlens.copyRemoteComparisonUrl"
				},
				{
					"command": "gitlens.stashSave",
					"when": "!gitlens:readonly && viewItem =~ /^gitlens:(stashes|status:files)$/",
					"group": "inline@98"
				},
				{
					"command": "gitlens.stashApply",
					"when": "!gitlens:readonly && viewItem == gitlens:stashes",
					"group": "inline@99"
				},
				{
					"command": "gitlens.stashSave",
					"when": "!gitlens:readonly && viewItem =~ /^gitlens:(stashes|status:files)$/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.stashApply",
					"when": "!gitlens:readonly && viewItem == gitlens:stashes",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.stashApply",
					"when": "!gitlens:readonly && viewItem == gitlens:stash",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.deleteStash",
					"when": "!gitlens:readonly && viewItem == gitlens:stash",
					"group": "inline@99"
				},
				{
					"command": "gitlens.stashApply",
					"when": "!gitlens:readonly && viewItem == gitlens:stash",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.deleteStash",
					"when": "!gitlens:readonly && viewItem == gitlens:stash",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.views.createTag",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:tags\\b/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.createTag",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:tags\\b/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.switchToTag",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:tag\\b/",
					"group": "inline@10"
				},
				{
					"command": "gitlens.views.switchToTag",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:tag\\b/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.deleteTag",
					"when": "!gitlens:readonly && viewItem == gitlens:tag",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.views.createBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:tag\\b/",
					"group": "1_gitlens_actions@3"
				},
				{
					"command": "gitlens.views.stageDirectory",
					"when": "viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.unstageDirectory",
					"when": "viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
					"group": "inline@2"
				},
				{
					"command": "gitlens.views.stageDirectory",
					"when": "viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.unstageDirectory",
					"when": "viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
					"group": "1_gitlens_actions@2"
				},
				{
					"command": "gitlens.views.copy",
					"when": "viewItem =~ /gitlens:(?=(branch|commit|contributor|folder|history:line|pullrequest|remote|repository|repo-folder|stash|tag)\\b)/",
					"group": "7_gitlens_cutcopypaste@1"
				},
				{
					"command": "gitlens.views.copy",
					"when": "viewItem =~ /gitlens:file(?!.*?\\b\\+(staged|unstaged))\\b/",
					"group": "7_gitlens_cutcopypaste@1"
				},
				{
					"command": "gitlens.views.dismissNode",
					"when": "viewItem =~ /gitlens:(compare:picker:ref|(compare|search):results(?!:)\\b(?!.*?\\b\\+pinned\\b))\\b(?!:(commits|files))/",
					"group": "8_gitlens_actions@98"
				},
				{
					"command": "gitlens.views.expandNode",
					"when": "viewItem =~ /gitlens:(branch|compare|folder|results|search|status)\\b/",
					"group": "9_gitlens@1"
				},
				{
					"command": "gitlens.views.refreshNode",
					"when": "viewItem =~ /gitlens:(?!(file|message|date-marker)\\b)/",
					"group": "9_gitlens@99"
				},
				{
					"command": "gitlens.views.loadAllChildren",
					"when": "viewItem =~ /gitlens:pager\\b/",
					"group": "inline@1"
				},
				{
					"command": "gitlens.views.loadAllChildren",
					"when": "viewItem =~ /gitlens:pager\\b/",
					"group": "1_gitlens_actions@1"
				},
				{
					"command": "gitlens.views.setShowRelativeDateMarkersOff",
					"when": "viewItem == gitlens:date-marker && config.gitlens.views.showRelativeDateMarkers",
					"group": "1_gitlens@0"
				}
			],
			"gitlens/commit/browse": [
				{
					"command": "gitlens.views.browseRepoAtRevision",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.views.browseRepoAtRevisionInNewWindow",
					"group": "1_gitlens@3"
				},
				{
					"command": "gitlens.views.browseRepoBeforeRevision",
					"group": "1_gitlens@2"
				},
				{
					"command": "gitlens.views.browseRepoBeforeRevisionInNewWindow",
					"group": "1_gitlens@4"
				}
			],
			"gitlens/commit/copy": [
				{
					"command": "gitlens.copyShaToClipboard",
					"when": "viewItem =~ /gitlens:(?!stash\\b)/",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.copyMessageToClipboard",
					"group": "1_gitlens@2"
				},
				{
					"command": "gitlens.copyRemoteCommitUrl",
					"when": "viewItem =~ /gitlens:(commit|file\\b(?=.*?\\b\\+committed\\b))/ && gitlens:hasRemotes",
					"group": "2_gitlens@1"
				},
				{
					"command": "gitlens.copyRemoteFileUrlToClipboard",
					"when": "viewItem =~ /gitlens:(file\\b(?=.*?\\b\\+committed\\b)|history:(file|line)|status:file)\\b/ && gitlens:hasRemotes",
					"group": "2_gitlens@2"
				}
			],
			"gitlens/commit/openChanges": [
				{
					"command": "gitlens.views.openChangedFileDiffs",
					"when": "viewItem =~ /gitlens:(commit|stash|results:files)\\b/",
					"group": "2_gitlens_quickopen@1"
				},
				{
					"command": "gitlens.views.openChangedFileDiffsWithWorking",
					"when": "viewItem =~ /gitlens:(commit|stash|results:files)\\b/",
					"group": "2_gitlens_quickopen@2"
				},
				{
					"command": "gitlens.views.openChangedFiles",
					"when": "viewItem =~ /gitlens:(commit|stash|results:files)\\b/",
					"group": "2_gitlens_quickopen_1@1"
				},
				{
					"command": "gitlens.views.openChangedFileRevisions",
					"when": "viewItem =~ /gitlens:(commit|stash|results:files)\\b/",
					"group": "2_gitlens_quickopen_1@2"
				}
			],
			"gitlens/commit/file/commit": [
				{
					"command": "gitlens.views.push",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
					"group": "1_gitlens_actions@0"
				},
				{
					"command": "gitlens.views.pushToCommit",
					"when": "gitlens:hasRemotes && !gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
					"group": "1_gitlens_actions@0"
				},
				{
					"command": "gitlens.views.revert",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@3"
				},
				{
					"command": "gitlens.views.resetToCommit",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@4"
				},
				{
					"command": "gitlens.views.resetCommit",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@5"
				},
				{
					"command": "gitlens.views.rebaseOntoCommit",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)/",
					"group": "1_gitlens_actions@6"
				},
				{
					"command": "gitlens.views.switchToCommit",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
					"group": "1_gitlens_actions@7"
				},
				{
					"command": "gitlens.views.createBranch",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
					"group": "1_gitlens_actions_1@1"
				},
				{
					"command": "gitlens.views.createTag",
					"when": "!gitlens:readonly && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
					"group": "1_gitlens_actions_1@2"
				}
			],
			"gitlens/commit/file/openChanges": [
				{
					"command": "gitlens.externalDiff",
					"when": "viewItem =~ /gitlens:file\\b(?!.*?\\b\\+conflicted\\b)/",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.views.openChangesWithWorking",
					"whsen": "viewItem =~ /gitlens:file\\b(?!.*?\\b\\+conflicted\\b)/",
					"group": "1_gitlens@2"
				},
				{
					"command": "gitlens.diffWithRevision",
					"group": "2_gitlens@1"
				},
				{
					"command": "gitlens.diffWithRevisionFrom",
					"group": "2_gitlens@2"
				},
				{
					"command": "gitlens.views.highlightChanges",
					"when": "viewItem =~ /gitlens:file\\b((?=.*?\\b\\+(committed|stashed)\\b)|:results)/",
					"group": "3_gitlens@1"
				},
				{
					"command": "gitlens.views.highlightRevisionChanges",
					"when": "viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/",
					"group": "3_gitlens@2"
				}
			],
			"gitlens/editor/annotations": [
				{
					"command": "gitlens.clearFileAnnotations",
					"when": "gitlens:activeFileStatus =~ /blameable/ && gitlens:annotationStatus",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.toggleFileBlame",
					"when": "gitlens:activeFileStatus =~ /blameable/ && !isInDiffEditor",
					"group": "2_gitlens@1"
				},
				{
					"command": "gitlens.toggleFileBlameInDiffLeft",
					"when": "gitlens:activeFileStatus =~ /blameable/ && isInDiffEditor && !isInDiffRightEditor",
					"group": "2_gitlens@1"
				},
				{
					"command": "gitlens.toggleFileBlameInDiffRight",
					"when": "gitlens:activeFileStatus =~ /blameable/ && isInDiffRightEditor",
					"group": "2_gitlens@1"
				},
				{
					"command": "gitlens.toggleFileHeatmap",
					"when": "gitlens:activeFileStatus =~ /blameable/ && !isInDiffEditor",
					"group": "2_gitlens@2"
				},
				{
					"command": "gitlens.toggleFileHeatmapInDiffLeft",
					"when": "gitlens:activeFileStatus =~ /blameable/ && isInDiffEditor && !isInDiffRightEditor",
					"group": "2_gitlens@2"
				},
				{
					"command": "gitlens.toggleFileHeatmapInDiffRight",
					"when": "gitlens:activeFileStatus =~ /blameable/ && isInDiffRightEditor",
					"group": "2_gitlens@2"
				},
				{
					"command": "gitlens.toggleFileChanges",
					"when": "gitlens:activeFileStatus =~ /blameable/",
					"group": "2_gitlens@3"
				}
			],
			"gitlens/editor/context/copy": [
				{
					"command": "gitlens.copyShaToClipboard",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.copyMessageToClipboard",
					"group": "1_gitlens@2"
				},
				{
					"command": "gitlens.copyRemoteCommitUrl",
					"group": "2_gitlens@3"
				},
				{
					"command": "gitlens.copyRemoteFileUrlToClipboard",
					"group": "2_gitlens@4"
				},
				{
					"command": "gitlens.copyRemoteFileUrlFrom",
					"group": "2_gitlens@5"
				}
			],
			"gitlens/editor/context/openChanges": [
				{
					"command": "gitlens.diffWithPrevious",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.diffWithWorking",
					"when": "resourceScheme == gitlens",
					"group": "1_gitlens@2"
				},
				{
					"command": "gitlens.diffLineWithPrevious",
					"when": "editorTextFocus && gitlens:activeFileStatus =~ /blameable/",
					"group": "1_gitlens@3"
				},
				{
					"command": "gitlens.diffLineWithWorking",
					"when": "editorTextFocus && gitlens:activeFileStatus =~ /blameable/",
					"group": "1_gitlens@4"
				},
				{
					"command": "gitlens.diffWithRevision",
					"group": "2_gitlens@1"
				},
				{
					"command": "gitlens.diffWithRevisionFrom",
					"group": "2_gitlens@2"
				},
				{
					"command": "gitlens.showQuickCommitFileDetails",
					"group": "3_gitlens@1"
				},
				{
					"command": "gitlens.showQuickRevisionDetails",
					"when": "gitlens:activeFileStatus =~ /revision/ && !isInDiffEditor",
					"group": "3_gitlens@2"
				},
				{
					"command": "gitlens.showQuickRevisionDetailsInDiffLeft",
					"when": "gitlens:activeFileStatus =~ /revision/ && isInDiffEditor && !isInDiffRightEditor",
					"group": "3_gitlens@2"
				},
				{
					"command": "gitlens.showQuickRevisionDetailsInDiffRight",
					"when": "gitlens:activeFileStatus =~ /revision/ && isInDiffRightEditor",
					"group": "3_gitlens@2"
				}
			],
			"gitlens/editor/openChanges": [
				{
					"command": "gitlens.diffWithPrevious",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.diffWithWorking",
					"when": "resourceScheme == gitlens",
					"group": "1_gitlens@2"
				},
				{
					"command": "gitlens.diffWithRevision",
					"group": "2_gitlens@1"
				},
				{
					"command": "gitlens.diffWithRevisionFrom",
					"group": "2_gitlens@2"
				}
			],
			"gitlens/explorer/openChanges": [
				{
					"command": "gitlens.diffWithPrevious",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.diffWithRevision",
					"group": "2_gitlens@1"
				},
				{
					"command": "gitlens.diffWithRevisionFrom",
					"group": "2_gitlens@2"
				}
			],
			"gitlens/scm/resourceGroup/openChanges": [
				{
					"command": "gitlens.externalDiffAll",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.diffDirectoryWithHead",
					"group": "1_gitlens@2"
				},
				{
					"command": "gitlens.diffDirectory",
					"group": "1_gitlens@3"
				}
			],
			"gitlens/scm/resourceState/openChanges": [
				{
					"command": "gitlens.externalDiff",
					"when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.compare",
					"group": "navigation"
				},
				{
					"command": "gitlens.diffWithRevision",
					"when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.compare",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.diffWithRevisionFrom",
					"when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.compare",
					"group": "1_gitlens@2"
				}
			],
			"gitlens/view/repositories/sections": [
				{
					"command": "gitlens.views.repositories.setShowBranchComparisonOn",
					"when": "!config.gitlens.views.repositories.showBranchComparison",
					"group": "1_gitlens@0"
				},
				{
					"command": "gitlens.views.repositories.setShowBranchComparisonOff",
					"when": "config.gitlens.views.repositories.showBranchComparison",
					"group": "1_gitlens@0"
				},
				{
					"command": "gitlens.views.repositories.setShowUpstreamStatusOn",
					"when": "!config.gitlens.views.repositories.showUpstreamStatus",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.views.repositories.setShowUpstreamStatusOff",
					"when": "config.gitlens.views.repositories.showUpstreamStatus",
					"group": "1_gitlens@1"
				},
				{
					"command": "gitlens.views.repositories.setShowCommitsOn",
					"when": "!config.gitlens.views.repositories.showCommits",
					"group": "2_gitlens@2"
				},
				{
					"command": "gitlens.views.repositories.setShowCommitsOff",
					"when": "config.gitlens.views.repositories.showCommits",
					"group": "2_gitlens@2"
				},
				{
					"command": "gitlens.views.repositories.setShowBranchesOn",
					"when": "!config.gitlens.views.repositories.showBranches",
					"group": "2_gitlens@3"
				},
				{
					"command": "gitlens.views.repositories.setShowBranchesOff",
					"when": "config.gitlens.views.repositories.showBranches",
					"group": "2_gitlens@3"
				},
				{
					"command": "gitlens.views.repositories.setShowRemotesOn",
					"when": "!config.gitlens.views.repositories.showRemotes",
					"group": "2_gitlens@4"
				},
				{
					"command": "gitlens.views.repositories.setShowRemotesOff",
					"when": "config.gitlens.views.repositories.showRemotes",
					"group": "2_gitlens@4"
				},
				{
					"command": "gitlens.views.repositories.setShowStashesOn",
					"when": "!config.gitlens.views.repositories.showStashes",
					"group": "2_gitlens@5"
				},
				{
					"command": "gitlens.views.repositories.setShowStashesOff",
					"when": "config.gitlens.views.repositories.showStashes",
					"group": "2_gitlens@5"
				},
				{
					"command": "gitlens.views.repositories.setShowTagsOn",
					"when": "!config.gitlens.views.repositories.showTags",
					"group": "2_gitlens@6"
				},
				{
					"command": "gitlens.views.repositories.setShowTagsOff",
					"when": "config.gitlens.views.repositories.showTags",
					"group": "2_gitlens@6"
				},
				{
					"command": "gitlens.views.repositories.setShowContributorsOn",
					"when": "!config.gitlens.views.repositories.showContributors",
					"group": "2_gitlens@7"
				},
				{
					"command": "gitlens.views.repositories.setShowContributorsOff",
					"when": "config.gitlens.views.repositories.showContributors",
					"group": "2_gitlens@7"
				}
			],
			"gitlens/view/searchAndCompare/new": [
				{
					"command": "gitlens.views.searchAndCompare.searchCommits",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
					"group": "navigation@10"
				},
				{
					"command": "gitlens.views.searchAndCompare.selectForCompare",
					"when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
					"group": "navigation@11"
				}
			]
		},
		"submenus": [
			{
				"id": "gitlens/commit/browse",
				"label": "Browse"
			},
			{
				"id": "gitlens/commit/copy",
				"label": "Copy as"
			},
			{
				"id": "gitlens/commit/openChanges",
				"label": "Open Changes"
			},
			{
				"id": "gitlens/commit/file/copy",
				"label": "Copy as"
			},
			{
				"id": "gitlens/commit/file/commit",
				"label": "Commit"
			},
			{
				"id": "gitlens/commit/file/openChanges",
				"label": "Open Changes"
			},
			{
				"id": "gitlens/editor/annotations",
				"label": "File Annotations",
				"icon": {
					"dark": "images/dark/icon-git.svg",
					"light": "images/light/icon-git.svg"
				}
			},
			{
				"id": "gitlens/editor/context/copy",
				"label": "Copy as"
			},
			{
				"id": "gitlens/editor/context/openChanges",
				"label": "Open Changes"
			},
			{
				"id": "gitlens/editor/openChanges",
				"label": "Open Changes"
			},
			{
				"id": "gitlens/explorer/openChanges",
				"label": "Open Changes"
			},
			{
				"id": "gitlens/scm/resourceGroup/openChanges",
				"label": "Open Changes"
			},
			{
				"id": "gitlens/scm/resourceState/openChanges",
				"label": "Open Changes"
			},
			{
				"id": "gitlens/view/repositories/sections",
				"label": "Sections"
			},
			{
				"id": "gitlens/view/searchAndCompare/new",
				"label": "New Search or Compare",
				"icon": "$(add)"
			}
		],
		"keybindings": [
			{
				"command": "gitlens.key.left",
				"key": "left",
				"when": "gitlens:key:left"
			},
			{
				"command": "gitlens.key.alt+left",
				"key": "alt+left",
				"when": "gitlens:key:alt+left"
			},
			{
				"command": "gitlens.key.ctrl+left",
				"key": "ctrl+left",
				"mac": "cmd+left",
				"when": "gitlens:key:ctrl+left"
			},
			{
				"command": "gitlens.key.right",
				"key": "right",
				"when": "gitlens:key:right"
			},
			{
				"command": "gitlens.key.alt+right",
				"key": "alt+right",
				"when": "gitlens:key:alt+right"
			},
			{
				"command": "gitlens.key.ctrl+right",
				"key": "ctrl+right",
				"mac": "cmd+right",
				"when": "gitlens:key:ctrl+right"
			},
			{
				"command": "gitlens.key.alt+,",
				"key": "alt+,",
				"when": "gitlens:key:,"
			},
			{
				"command": "gitlens.key.alt+.",
				"key": "alt+.",
				"when": "gitlens:key:."
			},
			{
				"command": "gitlens.key.escape",
				"key": "escape",
				"when": "gitlens:key:escape && editorTextFocus && !findWidgetVisible && !renameInputVisible && !suggestWidgetVisible && !isInEmbeddedEditor"
			},
			{
				"command": "gitlens.gitCommands",
				"key": "alt+/",
				"when": "config.gitlens.keymap == alternate && !gitlens:disabled"
			},
			{
				"command": "gitlens.gitCommands",
				"key": "ctrl+shift+g /",
				"mac": "cmd+alt+g /",
				"when": "config.gitlens.keymap == chorded && !gitlens:disabled"
			},
			{
				"command": "gitlens.toggleFileBlame",
				"key": "alt+b",
				"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /blameable/"
			},
			{
				"command": "gitlens.toggleFileBlame",
				"key": "ctrl+shift+g b",
				"mac": "cmd+alt+g b",
				"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /blameable/"
			},
			{
				"command": "gitlens.toggleCodeLens",
				"key": "shift+alt+b",
				"when": "config.gitlens.keymap == alternate && editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens"
			},
			{
				"command": "gitlens.toggleCodeLens",
				"key": "ctrl+shift+g shift+b",
				"mac": "cmd+alt+g shift+b",
				"when": "config.gitlens.keymap == chorded && editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens"
			},
			{
				"command": "gitlens.showQuickFileHistory",
				"key": "alt+h",
				"when": "config.gitlens.keymap == alternate && !gitlens:disabled"
			},
			{
				"command": "gitlens.showQuickFileHistory",
				"key": "ctrl+shift+g h",
				"mac": "cmd+alt+g h",
				"when": "config.gitlens.keymap == chorded && !gitlens:disabled"
			},
			{
				"command": "gitlens.showQuickRepoHistory",
				"key": "shift+alt+h",
				"when": "config.gitlens.keymap == alternate && !gitlens:disabled"
			},
			{
				"command": "gitlens.showQuickRepoHistory",
				"key": "ctrl+shift+g shift+h",
				"mac": "cmd+alt+g shift+h",
				"when": "config.gitlens.keymap == chorded && !gitlens:disabled"
			},
			{
				"command": "gitlens.showQuickRepoStatus",
				"key": "alt+s",
				"when": "config.gitlens.keymap == alternate && !gitlens:disabled"
			},
			{
				"command": "gitlens.showQuickRepoStatus",
				"key": "ctrl+shift+g s",
				"mac": "cmd+alt+g s",
				"when": "config.gitlens.keymap == chorded && !gitlens:disabled"
			},
			{
				"command": "gitlens.showQuickCommitFileDetails",
				"key": "alt+c",
				"when": "config.gitlens.keymap == alternate && editorTextFocus && !gitlens:disabled"
			},
			{
				"command": "gitlens.showQuickCommitFileDetails",
				"key": "ctrl+shift+g c",
				"mac": "cmd+alt+g c",
				"when": "config.gitlens.keymap == chorded && editorTextFocus && !gitlens:disabled"
			},
			{
				"command": "gitlens.diffWithPrevious",
				"key": "alt+,",
				"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /tracked/ && !isInDiffEditor"
			},
			{
				"command": "gitlens.diffWithPrevious",
				"key": "ctrl+shift+g ,",
				"mac": "cmd+alt+g ,",
				"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /tracked/ && !isInDiffEditor"
			},
			{
				"command": "gitlens.diffWithPreviousInDiffLeft",
				"key": "alt+,",
				"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /tracked/ && isInDiffEditor && !isInDiffRightEditor"
			},
			{
				"command": "gitlens.diffWithPreviousInDiffLeft",
				"key": "ctrl+shift+g ,",
				"mac": "cmd+alt+g ,",
				"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /tracked/ && isInDiffEditor && !isInDiffRightEditor"
			},
			{
				"command": "gitlens.diffWithPreviousInDiffRight",
				"key": "alt+,",
				"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /tracked/ && isInDiffRightEditor"
			},
			{
				"command": "gitlens.diffWithPreviousInDiffRight",
				"key": "ctrl+shift+g ,",
				"mac": "cmd+alt+g ,",
				"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /tracked/ && isInDiffRightEditor"
			},
			{
				"command": "gitlens.diffWithNext",
				"key": "alt+.",
				"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /revision/ && !isInDiffEditor"
			},
			{
				"command": "gitlens.diffWithNext",
				"key": "ctrl+shift+g .",
				"mac": "cmd+alt+g .",
				"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /revision/ && !isInDiffEditor"
			},
			{
				"command": "gitlens.diffWithNextInDiffLeft",
				"key": "alt+.",
				"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /revision/ && isInDiffEditor && !isInDiffRightEditor"
			},
			{
				"command": "gitlens.diffWithNextInDiffLeft",
				"key": "ctrl+shift+g .",
				"mac": "cmd+alt+g .",
				"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /revision/ && isInDiffEditor && !isInDiffRightEditor"
			},
			{
				"command": "gitlens.diffWithNextInDiffRight",
				"key": "alt+.",
				"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /revision/ && isInDiffRightEditor"
			},
			{
				"command": "gitlens.diffWithNextInDiffRight",
				"key": "ctrl+shift+g .",
				"mac": "cmd+alt+g .",
				"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /revision/ && isInDiffRightEditor"
			},
			{
				"command": "gitlens.diffWithWorking",
				"key": "shift+alt+.",
				"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /revision/"
			},
			{
				"command": "gitlens.diffWithWorking",
				"key": "ctrl+shift+g shift+.",
				"mac": "cmd+alt+g shift+.",
				"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /revision/"
			},
			{
				"command": "gitlens.diffLineWithPrevious",
				"key": "shift+alt+,",
				"when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:activeFileStatus =~ /tracked/"
			},
			{
				"command": "gitlens.diffLineWithPrevious",
				"key": "ctrl+shift+g shift+,",
				"mac": "cmd+alt+g shift+,",
				"when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:activeFileStatus =~ /tracked/"
			},
			{
				"command": "workbench.view.scm",
				"key": "ctrl+shift+g g",
				"mac": "ctrl+shift+g",
				"when": "config.gitlens.keymap == chorded && !gitlens:disabled"
			},
			{
				"command": "gitlens.views.branches.copy",
				"key": "ctrl+c",
				"mac": "cmd+c",
				"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/"
			},
			{
				"command": "gitlens.views.commits.copy",
				"key": "ctrl+c",
				"mac": "cmd+c",
				"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/"
			},
			{
				"command": "gitlens.views.contributors.copy",
				"key": "ctrl+c",
				"mac": "cmd+c",
				"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/"
			},
			{
				"command": "gitlens.views.fileHistory.copy",
				"key": "ctrl+c",
				"mac": "cmd+c",
				"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/"
			},
			{
				"command": "gitlens.views.lineHistory.copy",
				"key": "ctrl+c",
				"mac": "cmd+c",
				"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/"
			},
			{
				"command": "gitlens.views.remotes.copy",
				"key": "ctrl+c",
				"mac": "cmd+c",
				"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/"
			},
			{
				"command": "gitlens.views.repositories.copy",
				"key": "ctrl+c",
				"mac": "cmd+c",
				"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/"
			},
			{
				"command": "gitlens.views.stashes.copy",
				"key": "ctrl+c",
				"mac": "cmd+c",
				"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/"
			},
			{
				"command": "gitlens.views.searchAndCompare.copy",
				"key": "ctrl+c",
				"mac": "cmd+c",
				"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/"
			},
			{
				"command": "gitlens.views.tags.copy",
				"key": "ctrl+c",
				"mac": "cmd+c",
				"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/"
			}
		],
		"customEditors": [
			{
				"viewType": "gitlens.rebase",
				"displayName": "GitLens Interactive Rebase Editor",
				"selector": [
					{
						"filenamePattern": "git-rebase-todo"
					}
				]
			}
		],
		"resourceLabelFormatters": [
			{
				"scheme": "gitlens",
				"authority": "*",
				"formatting": {
					"label": "${path} (${authority})",
					"separator": "/"
				}
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "gitlens",
					"title": "GitLens",
					"icon": "images/gitlens-activitybar.svg"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "gitlens.views.welcome",
				"contents": "GitLens 11 is powerful, feature rich, and highly customizable to meet your needs. You can use the GitLens Welcome experience to get setup quickly.\n\n[Welcome (Quick Setup)](command:gitlens.showWelcomePage \"Opens the GitLens Welcome (Quick Setup)\")\n\nFor more options, run [GitLens: Open Settings](command:gitlens.showSettingsPage \"Opens the GitLens Interactive Settings\") from the Command Palette to open the interactive GitLens settings editor."
			},
			{
				"view": "gitlens.views.welcome",
				"contents": "[GitLens views](command:gitlens.showSettingsPage%23views) are shown on the Source Control side bar, by default. Run [GitLens: Set Views Layout](command:gitlens.setViewsLayout \"Changes the GitLens Views Layout\") from the Command Palette to switch to an alternate side bar layout, or drag & drop them."
			},
			{
				"view": "gitlens.views.welcome",
				"contents": "[Sponsor GitLens ❤](command:gitlens.supportGitLens)\n\nIf you find GitLens useful, please consider sponsoring it."
			},
			{
				"view": "gitlens.views.welcome",
				"contents": "[Close](command:gitlens.closeWelcomeView \"Closes the Welcome view\")"
			},
			{
				"view": "gitlens.views.updates",
				"contents": "[GitLens views](command:gitlens.showSettingsPage%23views) have moved to the Source Control side bar.\nRun [GitLens: Set Views Layout](command:gitlens.setViewsLayout \"Changes the GitLens Views Layout\") from the Command Palette to switch to an alternate side bar layout, or drag & drop them."
			},
			{
				"view": "gitlens.views.updates",
				"contents": "★ [Repositories](command:gitlens.showSettingsPage%23repositories-view) — replaced by [Commits](command:gitlens.showSettingsPage%23commits-view), [Branches](command:gitlens.showSettingsPage%23branches-view), [Remotes](command:gitlens.showSettingsPage%23remotes-view), [Stashes](command:gitlens.showSettingsPage%23stashes-view), [Tags](command:gitlens.showSettingsPage%23tags-view), and [Contributors](command:gitlens.showSettingsPage%23contributors-view) views. If you want it back, [click here](command:gitlens.showRepositoriesView)."
			},
			{
				"view": "gitlens.views.updates",
				"contents": "★ [File History](command:gitlens.showSettingsPage%23file-history-view) — combines file and line history into a single view"
			},
			{
				"view": "gitlens.views.updates",
				"contents": "★ [Search & Compare](command:gitlens.showSettingsPage%23search-compare-view) — combines Search Commits and Compare Commits into a single view"
			},
			{
				"view": "gitlens.views.updates",
				"contents": "[Close](command:gitlens.closeUpdatesView)"
			},
			{
				"view": "gitlens.views.searchAndCompare",
				"contents": "Search for commits by [message](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22pattern%22%3A%22message%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), [author](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22pattern%22%3A%22author%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), [SHA](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22pattern%22%3A%22commit%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), [file](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22pattern%22%3A%22file%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), or [changes](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22pattern%22%3A%22change%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D)\n\n[Search Commits...](command:gitlens.views.searchAndCompare.searchCommits)"
			},
			{
				"view": "gitlens.views.searchAndCompare",
				"contents": "Compare a <branch, tag, or ref> with another <branch, tag, or ref>\n\n[Compare References...](command:gitlens.views.searchAndCompare.selectForCompare)"
			}
		],
		"views": {
			"gitlens": [
				{
					"id": "gitlens.views.updates",
					"name": "Where did my views go?",
					"when": "gitlens:views:updates:visible != false",
					"contextualTitle": "GitLens",
					"icon": "images/gitlens-activitybar.svg",
					"visibility": "visible"
				},
				{
					"id": "gitlens.views.welcome",
					"name": "Welcome",
					"when": "gitlens:views:welcome:visible != false",
					"contextualTitle": "GitLens",
					"icon": "images/gitlens-activitybar.svg",
					"visibility": "visible"
				}
			],
			"scm": [
				{
					"id": "gitlens.views.commits",
					"name": "Commits",
					"when": "!gitlens:disabled",
					"contextualTitle": "GitLens",
					"icon": "images/views/commits.svg",
					"visibility": "visible"
				},
				{
					"id": "gitlens.views.repositories",
					"name": "Repositories",
					"when": "!gitlens:disabled",
					"contextualTitle": "GitLens",
					"icon": "images/views/repositories.svg",
					"visibility": "hidden"
				},
				{
					"id": "gitlens.views.fileHistory",
					"name": "File History",
					"when": "!gitlens:disabled",
					"contextualTitle": "GitLens",
					"icon": "images/views/history.svg",
					"visibility": "visible"
				},
				{
					"id": "gitlens.views.lineHistory",
					"name": "Line History",
					"when": "!gitlens:disabled",
					"contextualTitle": "GitLens",
					"icon": "images/views/history.svg",
					"visibility": "hidden"
				},
				{
					"id": "gitlens.views.branches",
					"name": "Branches",
					"when": "!gitlens:disabled",
					"contextualTitle": "GitLens",
					"icon": "images/views/branches.svg",
					"visibility": "collapsed"
				},
				{
					"id": "gitlens.views.remotes",
					"name": "Remotes",
					"when": "!gitlens:disabled",
					"contextualTitle": "GitLens",
					"icon": "images/views/remotes.svg",
					"visibility": "collapsed"
				},
				{
					"id": "gitlens.views.stashes",
					"name": "Stashes",
					"when": "!gitlens:disabled",
					"contextualTitle": "GitLens",
					"icon": "images/views/stashes.svg",
					"visibility": "collapsed"
				},
				{
					"id": "gitlens.views.tags",
					"name": "Tags",
					"when": "!gitlens:disabled",
					"contextualTitle": "GitLens",
					"icon": "images/views/tags.svg",
					"visibility": "collapsed"
				},
				{
					"id": "gitlens.views.contributors",
					"name": "Contributors",
					"when": "!gitlens:disabled",
					"contextualTitle": "GitLens",
					"icon": "images/views/contributors.svg",
					"visibility": "hidden"
				},
				{
					"id": "gitlens.views.searchAndCompare",
					"name": "Search & Compare",
					"when": "!gitlens:disabled",
					"contextualTitle": "GitLens",
					"icon": "images/views/search.svg",
					"visibility": "collapsed"
				}
			]
		}
	},
	"scripts": {
		"analyze:bundle": "webpack --env.analyzeBundle",
		"analyze:deps": "webpack --env.analyzeDeps",
		"build": "webpack --mode development",
		"build:extension": "webpack --mode development --config-name extension",
		"build:webviews": "webpack --mode development --config-name webviews",
		"bundle": "webpack --mode production",
		"clean": "git clean -Xdf -e !node_modules -e !node_modules/**/*",
		"lint": "eslint src/**/*.ts --fix --cache",
		"optimize:webviews": "webpack --config-name webviews --env.optimizeImages",
		"pack": "vsce package --yarn",
		"pack-insiders": "yarn run patch-insiders && yarn run pack",
		"patch-insiders": "node ./scripts/applyPatchForInsiders.js",
		"pretty": "prettier --config .prettierrc --loglevel warn --write .",
		"pub": "vsce publish --yarn",
		"rebuild": "yarn run reset && yarn run build",
		"reset": "yarn run clean && yarn --frozen-lockfile",
		"watch": "webpack --watch --mode development",
		"watch:extension": "webpack --watch --mode development --config-name extension",
		"watch:webviews": "webpack --watch --mode development --config-name webviews",
		"update-dts": "pushd \"src/@types\" && npx vscode-dts dev && popd",
		"update-dts:master": "pushd \"src/@types\" && npx vscode-dts master && popd",
		"update-emoji": "node ./scripts/generateEmojiShortcodeMap.js",
		"vscode:prepublish": "yarn run bundle"
	},
	"dependencies": {
		"@octokit/graphql": "4.5.9",
		"chroma-js": "2.1.0",
		"dayjs": "1.10.4",
		"iconv-lite": "0.6.2",
		"lodash-es": "4.17.20",
		"node-fetch": "3.0.0-beta.9",
		"sortablejs": "1.13.0",
		"vscode-codicons": "0.0.14",
		"vsls": "1.0.3015"
	},
	"devDependencies": {
		"@types/chroma-js": "2.1.3",
		"@types/lodash-es": "4.17.4",
		"@types/node": "12.12.70",
		"@types/sortablejs": "1.10.6",
		"@types/vscode": "1.52.0",
		"@typescript-eslint/eslint-plugin": "4.14.2",
		"@typescript-eslint/parser": "4.14.2",
		"circular-dependency-plugin": "5.2.2",
		"clean-webpack-plugin": "3.0.0",
		"copy-webpack-plugin": "7.0.0",
		"csp-html-webpack-plugin": "5.1.0",
		"css-loader": "5.0.1",
		"eslint": "7.19.0",
		"eslint-cli": "1.1.1",
		"eslint-config-prettier": "7.2.0",
		"eslint-plugin-import": "2.22.1",
		"fork-ts-checker-webpack-plugin": "6.1.0",
		"html-loader": "1.3.2",
		"html-webpack-plugin": "5.0.0-beta.6",
		"html-webpack-skip-assets-plugin": "0.0.2",
		"image-minimizer-webpack-plugin": "2.2.0",
		"imagemin-webp": "6.0.0",
		"mini-css-extract-plugin": "1.3.5",
		"node-sass": "5.0.0",
		"prettier": "2.2.1",
		"sass-loader": "10.1.1",
		"terser-webpack-plugin": "5.1.1",
		"ts-loader": "8.0.14",
		"typescript": "4.2.0-beta",
		"vsce": "1.85.0",
		"webpack": "5.19.0",
		"webpack-bundle-analyzer": "4.4.0",
		"webpack-cli": "4.2.0"
	},
	"__metadata": {
		"id": "4de763bd-505d-4978-9575-2b7696ecf94e",
		"publisherId": "678d198b-9b2e-49d3-96ff-6d801c9575df",
		"publisherDisplayName": "Eric Amodio"
	}
}